$DragonFly: src/sys/dev/netif/nv/Attic/phy.h.patch,v 1.2 2005/04/04 18:45:07 joerg Exp $

--- phy.h.orig	2005-03-12 10:59:28.000000000 +0100
+++ phy.h	2005-04-02 20:35:16.000000000 +0200
@@ -22,8 +22,8 @@
 #ifndef _PHY_H_
 #define _PHY_H_
 
-//#include "basetype.h"
-//#include "nvevent.h"
+/*#include "basetype.h" */
+/*#include "nvevent.h" */
 
 #ifdef __cplusplus
 extern "C" {
@@ -34,9 +34,9 @@
 
 #define HDP_VERSION_STRING "HDR P: $Revision: #23 $"
 
-//
-// Defaults for PHY timeout values.
-//
+/*
+** Defaults for PHY timeout values.
+*/
 #define PHY_POWER_ISOLATION_MS_TIMEOUT_DEFAULT      50
 #define PHY_RESET_MS_TIMEOUT_DEFAULT                50
 #define PHY_AUTONEG_MS_TIMEOUT_DEFAULT              3000
@@ -45,13 +45,13 @@
 #define PHY_POWER_DOWN_US_TIMEOUT_DEFAULT           500
 
 
-/////////////////////////////////////////////////////////////////////////
-// The phy module knows the values that need to go into the phy registers
-// but typically the method of writing those registers is controlled by
-// another module (usually the adapter because it is really the hardware
-// interface.) Hence, the phy needs routines to call to read and write the
-// phy registers. This structure with appropriate routines will be provided
-// in the PHY_Open call.
+/***********************************************************************/
+/* The phy module knows the values that need to go into the phy registers
+** but typically the method of writing those registers is controlled by
+** another module (usually the adapter because it is really the hardware
+** interface.) Hence, the phy needs routines to call to read and write the
+** phy registers. This structure with appropriate routines will be provided
+** in the PHY_Open call. */
 
 typedef NV_API_CALL NV_SINT32 (* PFN_READ_PHY)  (PNV_VOID pvData, NV_UINT32 ulPhyAddr, NV_UINT32 ulPhyReg, NV_UINT32 *pulValue);
 typedef NV_API_CALL NV_SINT32 (* PFN_WRITE_PHY) (PNV_VOID pvData, NV_UINT32 ulPhyAddr, NV_UINT32 ulPhyReg, NV_UINT32 ulValue);
@@ -61,13 +61,13 @@
     PNV_VOID            pADCX;
     PFN_READ_PHY        pfnRead;
     PFN_WRITE_PHY       pfnWrite;
-	// PFN_EVENT_OCCURED   pfnEventOccurred;
+	/* PFN_EVENT_OCCURED   pfnEventOccurred; */
 
-    //
-    // These fields are passed down via the FD.  FD get's them
-    // from the registry.  They allow one to fine tune the timeout
-    // values in the PHY.
-    //
+    /*
+    ** These fields are passed down via the FD.  FD get's them
+    ** from the registry.  They allow one to fine tune the timeout
+    ** values in the PHY.
+    */
     NV_UINT32	PhyPowerIsolationTimeoutInms;
 	NV_UINT32	PhyResetTimeoutInms;
 	NV_UINT32	PhyAutonegotiateTimeoutInms;
@@ -75,11 +75,11 @@
 	NV_UINT32	PhyPowerdownOnCloseInus;
 
 }   PHY_SUPPORT_API, *PPHY_SUPPORT_API;
-/////////////////////////////////////////////////////////////////////////
+/***********************************************************************/
 
 
-/////////////////////////////////////////////////////////////////////////
-// The functional typedefs for the PHY Api
+/***********************************************************************/
+/* The functional typedefs for the PHY Api */
 typedef NV_SINT32 (* PFN_PHY_INIT) (PNV_VOID pvContext, NV_UINT32 *pulLinkState, NV_UINT32 PhyMode);
 typedef NV_SINT32 (* PFN_PHY_DEINIT) (PNV_VOID pvContext);
 typedef NV_SINT32 (* PFN_PHY_CLOSE) (PNV_VOID pvContext);
@@ -95,8 +95,8 @@
 
 typedef struct  _PHY_API
 {
-    // This is the context to pass back in as the first arg on all
-    // the calls in the API below.
+    /* This is the context to pass back in as the first arg on all */
+    /* the calls in the API below. */
     PNV_VOID               pPHYCX;
 
     PFN_PHY_INIT                pfnInit;
@@ -112,22 +112,22 @@
     PFN_PHY_POWERDOWN            pfnPowerdown;
     PFN_SET_LOW_SPEED_FOR_PM    pfnSetLowSpeedForPM;
 }   PHY_API, *PPHY_API;
-/////////////////////////////////////////////////////////////////////////
+/***********************************************************************/
 
 
-/////////////////////////////////////////////////////////////////////////
-// This is the one function in the PHY interface that is publicly
-// available. The rest of the interface is returned in the pPhyApi;
-// The first argument needs to be cast to a POS_API structure ptr.
-// On input the second argument is a ptr to a PPHY_SUPPORT_API.
-// On output, the second argument should be treated as a ptr to a
-// PPHY_API and set appropriately.
+/***********************************************************************/
+/* This is the one function in the PHY interface that is publicly
+** available. The rest of the interface is returned in the pPhyApi;
+** The first argument needs to be cast to a POS_API structure ptr.
+** On input the second argument is a ptr to a PPHY_SUPPORT_API.
+** On output, the second argument should be treated as a ptr to a
+** PPHY_API and set appropriately. */
 extern NV_SINT32 PHY_Open (PNV_VOID pvOSApi, PNV_VOID pPhyApi, NV_UINT32 *pulPhyAddr, NV_UINT32 *pulPhyConnected);
-/////////////////////////////////////////////////////////////////////////
+/***********************************************************************/
 
 
-/////////////////////////////////////////////////////////////////////////
-// Here are the error codes the phy functions can return.
+/***********************************************************************/
+/* Here are the error codes the phy functions can return. */
 #define PHYERR_NONE                                 0x0000
 #define PHYERR_COULD_NOT_ALLOC_CONTEXT              0x0001
 #define PHYERR_RESET_NEVER_FINISHED                 0x0002
@@ -144,21 +144,21 @@
 
 #define PHY_INVALID_PHY_ADDR                    0xFFFF;
 
-/////////////////////////////////////////////////////////////////////////
+/***********************************************************************/
 
-// This value can be used in the ulPhyLinkSpeed field.
+/* This value can be used in the ulPhyLinkSpeed field. */
 #define PHY_LINK_SPEED_UNKNOWN          0x0FFFFFFFF
 
-//
-// Values used to configure PHY mode.
-//
+/*
+** Values used to configure PHY mode.
+*/
 #define PHY_MODE_MII    1
 #define PHY_MODE_RGMII  2
 
 typedef NV_VOID (* PTIMER_FUNC) (PNV_VOID pvContext);
 
 #ifdef __cplusplus
-} // extern "C"
+} /* extern "C" */
 #endif
 
-#endif //_PHY_H_
+#endif /*_PHY_H_ */
