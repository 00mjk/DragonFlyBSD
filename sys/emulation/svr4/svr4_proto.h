/*
 * System call prototypes.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * $DragonFly: src/sys/emulation/svr4/Attic/svr4_proto.h,v 1.9 2003/08/27 06:07:10 rob Exp $
 * created from DragonFly: src/sys/emulation/svr4/syscalls.master,v 1.3 2003/08/07 21:17:19 dillon Exp 
 */

#ifndef _SVR4_SYSPROTO_H_
#define	_SVR4_SYSPROTO_H_

#include <sys/signal.h>

#include <sys/acl.h>

#include <sys/msgport.h>

#include <sys/sysmsg.h>

#define	PAD_(t)	(sizeof(register_t) <= sizeof(t) ? \
		0 : sizeof(register_t) - sizeof(t))

struct	svr4_sys_open_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	int	flags;	char flags_[PAD_(int)];
	int	mode;	char mode_[PAD_(int)];
};
struct	svr4_sys_wait_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int *	status;	char status_[PAD_(int *)];
};
struct	svr4_sys_creat_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	int	mode;	char mode_[PAD_(int)];
};
struct	svr4_sys_execv_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	char **	argp;	char argp_[PAD_(char **)];
};
struct	svr4_sys_time_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	time_t *	t;	char t_[PAD_(time_t *)];
};
struct	svr4_sys_mknod_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	int	mode;	char mode_[PAD_(int)];
	int	dev;	char dev_[PAD_(int)];
};
struct	svr4_sys_break_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	caddr_t	nsize;	char nsize_[PAD_(caddr_t)];
};
struct	svr4_sys_stat_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	struct svr4_stat *	ub;	char ub_[PAD_(struct svr4_stat *)];
};
struct	svr4_sys_alarm_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	unsigned	sec;	char sec_[PAD_(unsigned)];
};
struct	svr4_sys_fstat_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	fd;	char fd_[PAD_(int)];
	struct svr4_stat *	sb;	char sb_[PAD_(struct svr4_stat *)];
};
struct	svr4_sys_pause_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	register_t dummy;
};
struct	svr4_sys_utime_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	struct svr4_utimbuf *	ubuf;	char ubuf_[PAD_(struct svr4_utimbuf *)];
};
struct	svr4_sys_access_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	int	flags;	char flags_[PAD_(int)];
};
struct	svr4_sys_nice_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	prio;	char prio_[PAD_(int)];
};
struct	svr4_sys_kill_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	pid;	char pid_[PAD_(int)];
	int	signum;	char signum_[PAD_(int)];
};
struct	svr4_sys_pgrpsys_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	cmd;	char cmd_[PAD_(int)];
	int	pid;	char pid_[PAD_(int)];
	int	pgid;	char pgid_[PAD_(int)];
};
struct	svr4_sys_times_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	struct tms *	tp;	char tp_[PAD_(struct tms *)];
};
struct	svr4_sys_signal_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	signum;	char signum_[PAD_(int)];
	svr4_sig_t	handler;	char handler_[PAD_(svr4_sig_t)];
};
#if defined(NOTYET)
struct	svr4_sys_msgsys_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	what;	char what_[PAD_(int)];
	int	a2;	char a2_[PAD_(int)];
	int	a3;	char a3_[PAD_(int)];
	int	a4;	char a4_[PAD_(int)];
	int	a5;	char a5_[PAD_(int)];
};
#else
#endif
struct	svr4_sys_sysarch_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	op;	char op_[PAD_(int)];
	void *	a1;	char a1_[PAD_(void *)];
};
struct	svr4_sys_ioctl_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	fd;	char fd_[PAD_(int)];
	u_long	com;	char com_[PAD_(u_long)];
	caddr_t	data;	char data_[PAD_(caddr_t)];
};
struct	svr4_sys_utssys_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	void *	a1;	char a1_[PAD_(void *)];
	void *	a2;	char a2_[PAD_(void *)];
	int	sel;	char sel_[PAD_(int)];
	void *	a3;	char a3_[PAD_(void *)];
};
struct	svr4_sys_execve_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	char **	argp;	char argp_[PAD_(char **)];
	char **	envp;	char envp_[PAD_(char **)];
};
struct	svr4_sys_fcntl_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	fd;	char fd_[PAD_(int)];
	int	cmd;	char cmd_[PAD_(int)];
	char *	arg;	char arg_[PAD_(char *)];
};
struct	svr4_sys_ulimit_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	cmd;	char cmd_[PAD_(int)];
	long	newlimit;	char newlimit_[PAD_(long)];
};
struct	svr4_sys_getdents_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	fd;	char fd_[PAD_(int)];
	char *	buf;	char buf_[PAD_(char *)];
	int	nbytes;	char nbytes_[PAD_(int)];
};
struct	svr4_sys_getmsg_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	fd;	char fd_[PAD_(int)];
	struct svr4_strbuf *	ctl;	char ctl_[PAD_(struct svr4_strbuf *)];
	struct svr4_strbuf *	dat;	char dat_[PAD_(struct svr4_strbuf *)];
	int *	flags;	char flags_[PAD_(int *)];
};
struct	svr4_sys_putmsg_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	fd;	char fd_[PAD_(int)];
	struct svr4_strbuf *	ctl;	char ctl_[PAD_(struct svr4_strbuf *)];
	struct svr4_strbuf *	dat;	char dat_[PAD_(struct svr4_strbuf *)];
	int	flags;	char flags_[PAD_(int)];
};
struct	svr4_sys_poll_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	struct pollfd *	fds;	char fds_[PAD_(struct pollfd *)];
	unsigned int	nfds;	char nfds_[PAD_(unsigned int)];
	int	timeout;	char timeout_[PAD_(int)];
};
struct	svr4_sys_lstat_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	struct svr4_stat *	ub;	char ub_[PAD_(struct svr4_stat *)];
};
struct	svr4_sys_sigprocmask_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	how;	char how_[PAD_(int)];
	svr4_sigset_t *	set;	char set_[PAD_(svr4_sigset_t *)];
	svr4_sigset_t *	oset;	char oset_[PAD_(svr4_sigset_t *)];
};
struct	svr4_sys_sigsuspend_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	svr4_sigset_t *	ss;	char ss_[PAD_(svr4_sigset_t *)];
};
struct	svr4_sys_sigaltstack_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	struct svr4_sigaltstack *	nss;	char nss_[PAD_(struct svr4_sigaltstack *)];
	struct svr4_sigaltstack *	oss;	char oss_[PAD_(struct svr4_sigaltstack *)];
};
struct	svr4_sys_sigaction_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	signum;	char signum_[PAD_(int)];
	struct svr4_sigaction *	nsa;	char nsa_[PAD_(struct svr4_sigaction *)];
	struct svr4_sigaction *	osa;	char osa_[PAD_(struct svr4_sigaction *)];
};
struct	svr4_sys_sigpending_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	what;	char what_[PAD_(int)];
	svr4_sigset_t *	mask;	char mask_[PAD_(svr4_sigset_t *)];
};
struct	svr4_sys_context_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	func;	char func_[PAD_(int)];
	struct svr4_ucontext *	uc;	char uc_[PAD_(struct svr4_ucontext *)];
};
struct	svr4_sys_statvfs_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	struct svr4_statvfs *	fs;	char fs_[PAD_(struct svr4_statvfs *)];
};
struct	svr4_sys_fstatvfs_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	fd;	char fd_[PAD_(int)];
	struct svr4_statvfs *	fs;	char fs_[PAD_(struct svr4_statvfs *)];
};
struct	svr4_sys_waitsys_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	grp;	char grp_[PAD_(int)];
	int	id;	char id_[PAD_(int)];
	union svr4_siginfo *	info;	char info_[PAD_(union svr4_siginfo *)];
	int	options;	char options_[PAD_(int)];
};
struct	svr4_sys_hrtsys_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	cmd;	char cmd_[PAD_(int)];
	int	fun;	char fun_[PAD_(int)];
	int	sub;	char sub_[PAD_(int)];
	void *	rv1;	char rv1_[PAD_(void *)];
	void *	rv2;	char rv2_[PAD_(void *)];
};
struct	svr4_sys_pathconf_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	int	name;	char name_[PAD_(int)];
};
struct	svr4_sys_mmap_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	caddr_t	addr;	char addr_[PAD_(caddr_t)];
	svr4_size_t	len;	char len_[PAD_(svr4_size_t)];
	int	prot;	char prot_[PAD_(int)];
	int	flags;	char flags_[PAD_(int)];
	int	fd;	char fd_[PAD_(int)];
	svr4_off_t	pos;	char pos_[PAD_(svr4_off_t)];
};
struct	svr4_sys_fpathconf_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	fd;	char fd_[PAD_(int)];
	int	name;	char name_[PAD_(int)];
};
struct	svr4_sys_xstat_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	two;	char two_[PAD_(int)];
	char *	path;	char path_[PAD_(char *)];
	struct svr4_xstat *	ub;	char ub_[PAD_(struct svr4_xstat *)];
};
struct	svr4_sys_lxstat_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	two;	char two_[PAD_(int)];
	char *	path;	char path_[PAD_(char *)];
	struct svr4_xstat *	ub;	char ub_[PAD_(struct svr4_xstat *)];
};
struct	svr4_sys_fxstat_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	two;	char two_[PAD_(int)];
	int	fd;	char fd_[PAD_(int)];
	struct svr4_xstat *	sb;	char sb_[PAD_(struct svr4_xstat *)];
};
struct	svr4_sys_xmknod_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	two;	char two_[PAD_(int)];
	char *	path;	char path_[PAD_(char *)];
	svr4_mode_t	mode;	char mode_[PAD_(svr4_mode_t)];
	svr4_dev_t	dev;	char dev_[PAD_(svr4_dev_t)];
};
struct	svr4_sys_setrlimit_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	which;	char which_[PAD_(int)];
	const struct svr4_rlimit *	rlp;	char rlp_[PAD_(const struct svr4_rlimit *)];
};
struct	svr4_sys_getrlimit_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	which;	char which_[PAD_(int)];
	struct svr4_rlimit *	rlp;	char rlp_[PAD_(struct svr4_rlimit *)];
};
struct	svr4_sys_memcntl_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	void *	addr;	char addr_[PAD_(void *)];
	svr4_size_t	len;	char len_[PAD_(svr4_size_t)];
	int	cmd;	char cmd_[PAD_(int)];
	void *	arg;	char arg_[PAD_(void *)];
	int	attr;	char attr_[PAD_(int)];
	int	mask;	char mask_[PAD_(int)];
};
struct	svr4_sys_uname_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	struct svr4_utsname *	name;	char name_[PAD_(struct svr4_utsname *)];
	int	dummy;	char dummy_[PAD_(int)];
};
struct	svr4_sys_sysconfig_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	name;	char name_[PAD_(int)];
};
struct	svr4_sys_systeminfo_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	what;	char what_[PAD_(int)];
	char *	buf;	char buf_[PAD_(char *)];
	long	len;	char len_[PAD_(long)];
};
struct	svr4_sys_fchroot_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	fd;	char fd_[PAD_(int)];
};
struct	svr4_sys_utimes_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	struct timeval *	tptr;	char tptr_[PAD_(struct timeval *)];
};
struct	svr4_sys_vhangup_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	register_t dummy;
};
struct	svr4_sys_gettimeofday_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	struct timeval *	tp;	char tp_[PAD_(struct timeval *)];
};
struct	svr4_sys_llseek_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	fd;	char fd_[PAD_(int)];
	long	offset1;	char offset1_[PAD_(long)];
	long	offset2;	char offset2_[PAD_(long)];
	int	whence;	char whence_[PAD_(int)];
};
struct	svr4_sys_acl_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	int	cmd;	char cmd_[PAD_(int)];
	int	num;	char num_[PAD_(int)];
	struct svr4_aclent *	buf;	char buf_[PAD_(struct svr4_aclent *)];
};
struct	svr4_sys_auditsys_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	code;	char code_[PAD_(int)];
	int	a1;	char a1_[PAD_(int)];
	int	a2;	char a2_[PAD_(int)];
	int	a3;	char a3_[PAD_(int)];
	int	a4;	char a4_[PAD_(int)];
	int	a5;	char a5_[PAD_(int)];
};
struct	svr4_sys_facl_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	fd;	char fd_[PAD_(int)];
	int	cmd;	char cmd_[PAD_(int)];
	int	num;	char num_[PAD_(int)];
	struct svr4_aclent *	buf;	char buf_[PAD_(struct svr4_aclent *)];
};
struct	svr4_sys_resolvepath_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	const char *	path;	char path_[PAD_(const char *)];
	char *	buf;	char buf_[PAD_(char *)];
	size_t	bufsiz;	char bufsiz_[PAD_(size_t)];
};
struct	svr4_sys_getdents64_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	fd;	char fd_[PAD_(int)];
	struct svr4_dirent64 *	dp;	char dp_[PAD_(struct svr4_dirent64 *)];
	int	nbytes;	char nbytes_[PAD_(int)];
};
struct	svr4_sys_mmap64_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	void *	addr;	char addr_[PAD_(void *)];
	svr4_size_t	len;	char len_[PAD_(svr4_size_t)];
	int	prot;	char prot_[PAD_(int)];
	int	flags;	char flags_[PAD_(int)];
	int	fd;	char fd_[PAD_(int)];
	svr4_off64_t	pos;	char pos_[PAD_(svr4_off64_t)];
};
struct	svr4_sys_stat64_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	struct svr4_stat64 *	sb;	char sb_[PAD_(struct svr4_stat64 *)];
};
struct	svr4_sys_lstat64_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	struct svr4_stat64 *	sb;	char sb_[PAD_(struct svr4_stat64 *)];
};
struct	svr4_sys_fstat64_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	fd;	char fd_[PAD_(int)];
	struct svr4_stat64 *	sb;	char sb_[PAD_(struct svr4_stat64 *)];
};
struct	svr4_sys_statvfs64_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	struct svr4_statvfs64 *	fs;	char fs_[PAD_(struct svr4_statvfs64 *)];
};
struct	svr4_sys_fstatvfs64_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	fd;	char fd_[PAD_(int)];
	struct svr4_statvfs64 *	fs;	char fs_[PAD_(struct svr4_statvfs64 *)];
};
struct	svr4_sys_setrlimit64_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	which;	char which_[PAD_(int)];
	const struct svr4_rlimit64 *	rlp;	char rlp_[PAD_(const struct svr4_rlimit64 *)];
};
struct	svr4_sys_getrlimit64_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	which;	char which_[PAD_(int)];
	struct svr4_rlimit64 *	rlp;	char rlp_[PAD_(struct svr4_rlimit64 *)];
};
struct	svr4_sys_creat64_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	int	mode;	char mode_[PAD_(int)];
};
struct	svr4_sys_open64_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	char *	path;	char path_[PAD_(char *)];
	int	flags;	char flags_[PAD_(int)];
	int	mode;	char mode_[PAD_(int)];
};
struct	svr4_sys_socket_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	domain;	char domain_[PAD_(int)];
	int	type;	char type_[PAD_(int)];
	int	protocol;	char protocol_[PAD_(int)];
};
struct	svr4_sys_recv_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	s;	char s_[PAD_(int)];
	caddr_t	buf;	char buf_[PAD_(caddr_t)];
	int	len;	char len_[PAD_(int)];
	int	flags;	char flags_[PAD_(int)];
};
struct	svr4_sys_send_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	s;	char s_[PAD_(int)];
	caddr_t	buf;	char buf_[PAD_(caddr_t)];
	int	len;	char len_[PAD_(int)];
	int	flags;	char flags_[PAD_(int)];
};
struct	svr4_sys_sendto_args {
#ifdef _KERNEL
	union sysmsg sysmsg;
#endif
	union usrmsg usrmsg;
	int	s;	char s_[PAD_(int)];
	void *	buf;	char buf_[PAD_(void *)];
	size_t	len;	char len_[PAD_(size_t)];
	int	flags;	char flags_[PAD_(int)];
	struct sockaddr *	to;	char to_[PAD_(struct sockaddr *)];
	int	tolen;	char tolen_[PAD_(int)];
};

#ifdef _KERNEL

int	svr4_sys_open (struct svr4_sys_open_args *);
int	svr4_sys_wait (struct svr4_sys_wait_args *);
int	svr4_sys_creat (struct svr4_sys_creat_args *);
int	svr4_sys_execv (struct svr4_sys_execv_args *);
int	svr4_sys_time (struct svr4_sys_time_args *);
int	svr4_sys_mknod (struct svr4_sys_mknod_args *);
int	svr4_sys_break (struct svr4_sys_break_args *);
int	svr4_sys_stat (struct svr4_sys_stat_args *);
int	svr4_sys_alarm (struct svr4_sys_alarm_args *);
int	svr4_sys_fstat (struct svr4_sys_fstat_args *);
int	svr4_sys_pause (struct svr4_sys_pause_args *);
int	svr4_sys_utime (struct svr4_sys_utime_args *);
int	svr4_sys_access (struct svr4_sys_access_args *);
int	svr4_sys_nice (struct svr4_sys_nice_args *);
int	svr4_sys_kill (struct svr4_sys_kill_args *);
int	svr4_sys_pgrpsys (struct svr4_sys_pgrpsys_args *);
int	svr4_sys_times (struct svr4_sys_times_args *);
int	svr4_sys_signal (struct svr4_sys_signal_args *);
#if defined(NOTYET)
int	svr4_sys_msgsys (struct svr4_sys_msgsys_args *);
#else
#endif
int	svr4_sys_sysarch (struct svr4_sys_sysarch_args *);
int	svr4_sys_ioctl (struct svr4_sys_ioctl_args *);
int	svr4_sys_utssys (struct svr4_sys_utssys_args *);
int	svr4_sys_execve (struct svr4_sys_execve_args *);
int	svr4_sys_fcntl (struct svr4_sys_fcntl_args *);
int	svr4_sys_ulimit (struct svr4_sys_ulimit_args *);
int	svr4_sys_getdents (struct svr4_sys_getdents_args *);
int	svr4_sys_getmsg (struct svr4_sys_getmsg_args *);
int	svr4_sys_putmsg (struct svr4_sys_putmsg_args *);
int	svr4_sys_poll (struct svr4_sys_poll_args *);
int	svr4_sys_lstat (struct svr4_sys_lstat_args *);
int	svr4_sys_sigprocmask (struct svr4_sys_sigprocmask_args *);
int	svr4_sys_sigsuspend (struct svr4_sys_sigsuspend_args *);
int	svr4_sys_sigaltstack (struct svr4_sys_sigaltstack_args *);
int	svr4_sys_sigaction (struct svr4_sys_sigaction_args *);
int	svr4_sys_sigpending (struct svr4_sys_sigpending_args *);
int	svr4_sys_context (struct svr4_sys_context_args *);
int	svr4_sys_statvfs (struct svr4_sys_statvfs_args *);
int	svr4_sys_fstatvfs (struct svr4_sys_fstatvfs_args *);
int	svr4_sys_waitsys (struct svr4_sys_waitsys_args *);
int	svr4_sys_hrtsys (struct svr4_sys_hrtsys_args *);
int	svr4_sys_pathconf (struct svr4_sys_pathconf_args *);
int	svr4_sys_mmap (struct svr4_sys_mmap_args *);
int	svr4_sys_fpathconf (struct svr4_sys_fpathconf_args *);
int	svr4_sys_xstat (struct svr4_sys_xstat_args *);
int	svr4_sys_lxstat (struct svr4_sys_lxstat_args *);
int	svr4_sys_fxstat (struct svr4_sys_fxstat_args *);
int	svr4_sys_xmknod (struct svr4_sys_xmknod_args *);
int	svr4_sys_setrlimit (struct svr4_sys_setrlimit_args *);
int	svr4_sys_getrlimit (struct svr4_sys_getrlimit_args *);
int	svr4_sys_memcntl (struct svr4_sys_memcntl_args *);
int	svr4_sys_uname (struct svr4_sys_uname_args *);
int	svr4_sys_sysconfig (struct svr4_sys_sysconfig_args *);
int	svr4_sys_systeminfo (struct svr4_sys_systeminfo_args *);
int	svr4_sys_fchroot (struct svr4_sys_fchroot_args *);
int	svr4_sys_utimes (struct svr4_sys_utimes_args *);
int	svr4_sys_vhangup (struct svr4_sys_vhangup_args *);
int	svr4_sys_gettimeofday (struct svr4_sys_gettimeofday_args *);
int	svr4_sys_llseek (struct svr4_sys_llseek_args *);
int	svr4_sys_acl (struct svr4_sys_acl_args *);
int	svr4_sys_auditsys (struct svr4_sys_auditsys_args *);
int	svr4_sys_facl (struct svr4_sys_facl_args *);
int	svr4_sys_resolvepath (struct svr4_sys_resolvepath_args *);
int	svr4_sys_getdents64 (struct svr4_sys_getdents64_args *);
int	svr4_sys_mmap64 (struct svr4_sys_mmap64_args *);
int	svr4_sys_stat64 (struct svr4_sys_stat64_args *);
int	svr4_sys_lstat64 (struct svr4_sys_lstat64_args *);
int	svr4_sys_fstat64 (struct svr4_sys_fstat64_args *);
int	svr4_sys_statvfs64 (struct svr4_sys_statvfs64_args *);
int	svr4_sys_fstatvfs64 (struct svr4_sys_fstatvfs64_args *);
int	svr4_sys_setrlimit64 (struct svr4_sys_setrlimit64_args *);
int	svr4_sys_getrlimit64 (struct svr4_sys_getrlimit64_args *);
int	svr4_sys_creat64 (struct svr4_sys_creat64_args *);
int	svr4_sys_open64 (struct svr4_sys_open64_args *);
int	svr4_sys_socket (struct svr4_sys_socket_args *);
int	svr4_sys_recv (struct svr4_sys_recv_args *);
int	svr4_sys_send (struct svr4_sys_send_args *);
int	svr4_sys_sendto (struct svr4_sys_sendto_args *);

#endif /* _KERNEL */

#ifdef COMPAT_43

#if defined(NOTYET)
#else
#endif

#ifdef _KERNEL


#endif /* _KERNEL */

#endif /* COMPAT_43 */

#undef PAD_

#endif /* !_SVR4_SYSPROTO_H_ */
