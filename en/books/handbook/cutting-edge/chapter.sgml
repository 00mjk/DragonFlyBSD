<!--
     The FreeBSD Documentation Project

     $FreeBSD: doc/en_US.ISO8859-1/books/handbook/cutting-edge/chapter.sgml,v 1.200 2004/05/17 19:48:36 simon Exp $
     $DragonFly: doc/en/books/handbook/cutting-edge/chapter.sgml,v 1.5 2006/08/15 02:50:57 justin Exp $
-->

<chapter id="updating">
  <chapterinfo>
    <authorgroup>
      <author>
        <firstname>Justin</firstname>
        <surname>Sherrill</surname>
        <contrib>Written by </contrib>
      </author> <!-- justin@dragonflybsd.org  29 May 2004 -->
    </authorgroup>
  </chapterinfo>
  <title>Updating &os;</title>

  <sect1 id="updating-setup">
    <title>Initial Setup</title>
      <para>Updates to the &os; source code
      is performed using <application>cvsup</application>.  
      <application>cvsup</application> compares your local system source or 
      ports files to a remote repository, and downloads any changes.  Only the 
      differences in the files are downloaded, saving on bandwidth and time.</para>
  
      <para><application>cvsup</application> exists as a port 
      (<filename role="package">devel/cvsup</filename>) and traditionally had to be 
      installed separately on FreeBSD.  With &os;, the binary is installed as part 
      of the base system.</para>
  </sect1>
  
  <sect1 id="updating-using">
    <title>Configuration</title>

      <para>cvsup is guided by a configuration file that describes what files 
      to update, and the source from which to update them.</para>  

      <para>Here is a basic DragonFly cvsup configuration file:</para>

      <programlisting>*default host=cvsup.dragonflybsd.org
*default base=/usr
*default prefix=/usr
*default release=cvs
*default release=cvs tag=.
*default delete use-rel-suffix
*default compress


cvs-src
</programlisting>

      <para>Alternately, the file 
      <filename>/usr/share/examples/cvsup/DragonFly-src-supfile</filename> 
      can be used as-is to update system source.  


<!--
TODO: link to an explanation of pkgsrc, which is similar.  Also, 
an explanation of the different tags; this example goes to bleeding-edge.
-->

      <para>Run cvsup using <filename>/usr/share/examples/cvsup/DragonFly-src-supfile</filename> 
      as an argument or with a separate file containing the above example text.  Your system 
      source files will be updated.
      </para>  

  </sect1>

<!-- TODO: pkgsrc section here -->

  <sect1 id="updating-before-building">
    <title>Preparing to Update</title>
      <para>If you want to create a custom kernel, see <xref linkend="kernelconfig">.  This is not 
      needed to update your system unless there is a specific feature that needs to be added to the 
      kernel.</para>
  
      <para>Check recent mail traffic on &a.kernel; and the file <filename>/usr/src/UPDATING</filename>.  
      Any recent problems or changes should be described there.  
      <filename>/usr/src/UPDATING</filename> also contains abbreviated build instructions in case 
      these directions are not available.</para>
  </sect1>

  <sect1 id="updating-makeworld">
    <title>Updating the System</title>
      <para>Updating the system is a relatively simple process.  As root, in 
      <filename>/usr/src</filename>:</para>
  
      <screen>&prompt.user; <userinput>make buildworld</userinput>
&prompt.user; <userinput>make buildkernel KERNCONF=GENERIC</userinput>
&prompt.user; <userinput>make installkernel KERNCONF=GENERIC</userinput>
&prompt.user; <userinput>make installworld</userinput>
&prompt.user; <userinput>make upgrade</userinput>
(reboot)
</screen>
      
      <para>An explanation of each step follows.</para>
  
      <itemizedlist>
      <listitem>
	<para>make buildworld : This command rebuilds all userland programs.  This is the most 
	time-consuming step.</para>
      </listitem>

      <listitem>
	<para><userinput>make buildkernel KERNCONF=GENERIC</userinput> : This builds the kernel using the config 
	file specified by KERNCONF.  If you've created a different kernel configuration file 
	as detailed in <xref linkend="kernelconfig">, use that instead of GENERIC.  If 
	KERNCONF isn't specified, the GENERIC configuration file (installed by default) is 
	used.</para>
      </listitem>
    
      <listitem>
	<para><userinput>make installkernel KERNCONF=GENERIC</userinput> : This installs 
	the kernel using the config file specified by KERNCONF.  The value of 
	KERNCONF must match what was specified in the <userinput>make buildkernel</userinput> 
	command, so that files that match this configuration can be installed correctly.  
	As with <userinput>make buildkernel</userinput>, KERNCONF will be set to 
	GENERIC if not otherwise specified.</para>
      </listitem>
    
      <listitem>
	<para><userinput>make installworld</userinput> : This copies all the files built 
	in the buildworld step (i.e. everything that is not the kernel) to the 
	proper places in the filesystem.  </para>
      </listitem>
    
      <listitem>
	<para><userinput>make upgrade</userinput> : This cleans out any files 
	made unnecessary by this upgrade.</para>
      </listitem>
      
      <listitem>
	<para><userinput>(reboot)</userinput> : Reboot the computer to load the new kernel 
	and use the new files installed as part of this process.</para>
      </listitem>
        
    </itemizedlist>
  
    <para>If your computer fails to reboot, check the <xref linkend="kernelconfig-trouble"> section 
    of the handbook.</para>
    
  </sect1>

</chapter>





