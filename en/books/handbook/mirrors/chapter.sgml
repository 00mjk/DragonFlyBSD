<!--
     The FreeBSD Documentation Project

     $FreeBSD: doc/en_US.ISO8859-1/books/handbook/mirrors/chapter.sgml,v 1.340 2004/04/24 17:41:22 hrs Exp $
     $DragonFly: doc/en/books/handbook/mirrors/chapter.sgml,v 1.3 2005/06/27 23:32:57 reed Exp $
-->

<appendix id="mirrors">
  <title>Obtaining &os;</title>

  <sect1 id="mirrors-cdrom">
    <title>CDROM and DVD Publishers</title>

    <sect2>
      <title>Retail Products</title>

      <para>&os; is available as a purchasable CD:</para>

      <!-- reed: should this section be with following? and where is the CD? -->
      <itemizedlist>
	<listitem>
	  <address>
	    <otheraddr>Crescent Anchor</otheraddr>
	    WWW: <otheraddr><ulink url="http://www.crescentanchor.com/"></ulink></otheraddr>
	  </address>
	</listitem>
      </itemizedlist>
    </sect2>

    <sect2>
      <title>CD and DVD Sets</title>

      <para>DragonFly BSD CD and DVD sets are available from online
	retailers:</para>

    <itemizedlist>
      <listitem>
        <address>
	  <otheraddr>Daemon News Mall</otheraddr>
	  <street>560 South State Street, Suite A2</street>
	  <city>Orem</city>, <state>UT</state> <postcode>84058</postcode>
	  <country>USA</country>
	  Phone: <phone>+1 800 407-5170</phone>
	  Fax: <fax>+1 1 801 765-0877</fax>
	  Email: <email>sales@bsdmall.com</email>
	  WWW: <otheraddr><ulink url="http://www.bsdmall.com/"></ulink></otheraddr>
        </address>
      </listitem>

      <listitem>
        <address>
	  <otheraddr>BSD-Systems</otheraddr>
	  Email: <email>sales@bsd-systems.co.uk</email>
	  WWW: <otheraddr><ulink url="http://www.bsd-systems.co.uk/"></ulink></otheraddr>
        </address>
      </listitem>
 

    </itemizedlist>
    </sect2>

 
  <sect1 id="mirrors-ftp">
    <title>FTP Sites</title>

    <para>The official sources for &os; are available via anonymous FTP
      from a worldwide set of mirror sites.  The site
      <ulink url="ftp://ftp.dragonflybsd.org/"></ulink> is well
      connected and allows a large number of connections to it, but
      you are probably better off finding a <quote>closer</quote>
      mirror site (especially if you decide to set up some sort of
      mirror site).</para>

    <para>The <ulink
	url="http://www.dragonflybsd.org/main/download.cgi">&os; mirror
	sites list</ulink> is the best, most up-to-date source.</para>

    <para>Additionally, &os; is available via anonymous FTP from the
      following mirror sites.  If you choose to obtain &os; via anonymous
      FTP, please try to use a site near you.  The mirror sites listed as
      <quote>Primary Mirror Sites</quote> typically have the entire &os; archive (all
      the currently available versions for each of the architectures) but
      you will probably have faster download times from a site that is
      in your country or region.  The regional sites carry the most recent
      versions for the most popular architecture(s) but might not carry
      the entire &os; archive.  All sites provide access via anonymous
      FTP but some sites also provide access via other methods.  The access
      methods available for each site are provided in parentheses
      after the hostname.</para>

   &chap.mirrors.ftp.inc;

  </sect1>

     
    
  <sect1 id="cvsup">
    <title>Using CVSup</title>
    
    <sect2 id="cvsup-intro">
      <title>Introduction</title>
      
      <para><application>CVSup</application> is a software package for
	distributing and updating source trees from a master CVS
	repository on a remote server host.  The &os; sources are
	maintained in a CVS repository on a central development machine
	in California.  With <application>CVSup</application>, &os;
	users can easily keep their own source trees up to date.</para>
      
      <para><application>CVSup</application> uses the so-called
	<emphasis>pull</emphasis> model of updating.  Under the pull
	model, each client asks the server for updates, if and when they
	are wanted.  The server waits passively for update requests from
	its clients.  Thus all updates are instigated by the client.
	The server never sends unsolicited updates.  Users must either
	run the <application>CVSup</application> client manually to get
	an update, or they must set up a <command>cron</command> job to
	run it automatically on a regular basis.</para>
      
      <para>The term <application>CVSup</application>, capitalized just
	so, refers to the entire software package.  Its main components
	are the client <command>cvsup</command> which runs on each
	user's machine, and the server <command>cvsupd</command> which
	runs at each of the &os; mirror sites that use 
	<application>CVSup</application>.</para>

    </sect2>

    <sect2 id="cvsup-install">
      <title>Installation</title>
      
      <para><application>CVSup</application> is installed by default on 
        all &os; systems.</para>
    </sect2>

    <sect2 id="cvsup-config">
      <title>CVSup Configuration</title>
      
      <para><application>CVSup</application>'s operation is controlled
	by a configuration file called the <filename>supfile</filename>.
	There are some sample <filename>supfiles</filename> in the
	directory <ulink type="html"
	  url="file://localhost/usr/share/examples/cvsup/"><filename>/usr/share/examples/cvsup/</filename></ulink>.</para>
      
      <para>The information in a <filename>supfile</filename> answers
	the following questions for <application>CVSup</application>:</para>
      
      <itemizedlist>
	<listitem>
	  <para><link linkend="cvsup-config-files">Which files do you
	      want to receive?</link></para>
	</listitem>
	
	<listitem>
	  <para><link linkend="cvsup-config-vers">Which versions of them
	      do you want?</link></para>
	</listitem>
	
	<listitem>
	  <para><link linkend="cvsup-config-where">Where do you want to
	      get them from?</link></para>
	</listitem>
	
	<listitem>
	  <para><link linkend="cvsup-config-dest">Where do you want to
	      put them on your own machine?</link></para>
	</listitem>
	
	<listitem>
	  <para><link linkend="cvsup-config-status">Where do you want to
	      put your status files?</link></para>
	</listitem>
      </itemizedlist>

      <para>In the following sections, we will construct a typical
	<filename>supfile</filename> by answering each of these
	questions in turn.  First, we describe the overall structure of
	a <filename>supfile</filename>.</para>

      <para>A <filename>supfile</filename> is a text file.  Comments
	begin with <literal>#</literal> and extend to the end of the
	line.  Lines that are blank and lines that contain only
	comments are ignored.</para>
      
      <para>Each remaining line describes a set of files that the user
	wishes to receive.  The line begins with the name of a
	<quote>collection</quote>, a logical grouping of files defined by
	the server. The name of the collection tells the server which
	files you want.  After the collection name come zero or more
	fields, separated by white space.  These fields answer the
	questions listed above.  There are two types of fields: flag
	fields and value fields.  A flag field consists of a keyword
	standing alone, e.g., <literal>delete</literal> or
	<literal>compress</literal>.  A value field also begins with a
	keyword, but the keyword is followed without intervening white
	space by <literal>=</literal> and a second word.  For example,
	<literal>release=cvs</literal> is a value field.</para>
      
      <para>A <filename>supfile</filename> typically specifies more than
	one collection to receive.  One way to structure a
	<filename>supfile</filename> is to specify all of the relevant
	fields explicitly for each collection.  However, that tends to
	make the <filename>supfile</filename> lines quite long, and it
	is inconvenient because most fields are the same for all of the
	collections in a <filename>supfile</filename>.
	<application>CVSup</application> provides a defaulting mechanism
	to avoid these problems.  Lines beginning with the special
	pseudo-collection name <literal>*default</literal> can be used
	to set flags and values which will be used as defaults for the
	subsequent collections in the <filename>supfile</filename>.  A
	default value can be overridden for an individual collection, by
	specifying a different value with the collection itself.
	Defaults can also be changed or augmented in mid-supfile by
	additional <literal>*default</literal> lines.</para>

      <para>With this background, we will now proceed to construct a
	<filename>supfile</filename> for receiving and updating the main
	source tree of <link
	  linkend="updating-setup">&os;</link>.</para>

      <itemizedlist>
	<listitem>
	  <para><anchor id="cvsup-config-files">Which files do you want
	    to receive?</para>
	  
	  <para>The files available via <application>CVSup</application>
	    are organized into named groups called
	    <quote>collections</quote>.  The collections that are
	    available are described in the <link
	      linkend="cvsup-collec">following section</link>.  In this
	    example, we
	    wish to receive the entire main source tree for the &os;
	    system.  There is a single large collection
	    <literal>cvs-src</literal> which will give us all of that.
	    As a first step toward constructing our
	    <filename>supfile</filename>, we
	    simply list the collections, one per line (in this case,
	    only one line):</para>

	  <programlisting>cvs-src</programlisting>
	</listitem>

	<listitem>
	  <para><anchor id="cvsup-config-vers">Which version(s) of them
	    do you want?</para>

	  <para>With <application>CVSup</application>, you can receive
	    virtually any version of the sources that ever existed.
	    That is possible because the
	    <application>cvsupd</application> server works directly from
	    the CVS repository, which contains all of the versions.  You
	    specify which one of them you want using the
	    <literal>tag=</literal> and <option>date=</option> value
	    fields.</para>
	  
	  <warning>
	    <para>Be very careful to specify any <literal>tag=</literal>
	      fields correctly.  Some tags are valid only for certain
	      collections of files.  If you specify an incorrect or
	      misspelled tag, <application>CVSup</application>
	      will delete files which you probably
	      do not want deleted.  In particular, use <emphasis>only
	      </emphasis> <literal>tag=.</literal> for the
	      <literal>ports-*</literal> collections.</para>
	  </warning>

	  <para>The <literal>tag=</literal> field names a symbolic tag
	    in the repository.  There are two kinds of tags, revision
	    tags and branch tags.  A revision tag refers to a specific
	    revision.  Its meaning stays the same from day to day.  A
	    branch tag, on the other hand, refers to the latest revision
	    on a given line of development, at any given time.  Because
	    a branch tag does not refer to a specific revision, it may
	    mean something different tomorrow than it means
	    today.</para>
	  
	  <para><xref linkend="cvs-tags"> contains branch tags that
	    users might be interested in.  When specifying a tag in
	    <application>CVSup</application>'s configuration file, it
	    must be preceded with <literal>tag=</literal>
	    (<literal>RELENG_4</literal> will become
	    <literal>tag=RELENG_4</literal>).
	    Keep in mind that only the <literal>tag=.</literal> is
	    relevant for the ports collection.</para>

	  <warning>
	    <para>Be very careful to type the tag name exactly as shown.
	      <application>CVSup</application> cannot distinguish
	      between valid and invalid tags.  If you misspell the tag,
	      <application>CVSup</application> will behave as though you
	      had specified a valid tag which happens to refer to no
	      files at all.  It will delete your existing sources in
	      that case.</para>
	  </warning>

	  <para>When you specify a branch tag, you normally receive the
	    latest versions of the files on that line of development.
	    If you wish to receive some past version, you can do so by
	    specifying a date with the <option>date=</option> value
	    field. The &man.cvsup.1; manual page explains how to do
	    that.</para>

	  <para>For our example, we wish to receive the current release 
	  of &os;.  We add this line at the beginning of our
	    <filename>supfile</filename>:</para>
	  
	  <programlisting>*default tag=.</programlisting>

	  <para>There is an important special case that comes into play
	    if you specify neither a <literal>tag=</literal> field nor a
	    <literal>date=</literal> field.  In that case, you receive
	    the actual RCS files directly from the server's CVS
	    repository, rather than receiving a particular version.
	    Developers generally prefer this mode of operation.  By
	    maintaining a copy of the repository itself on their
	    systems, they gain the ability to browse the revision
	    histories and examine past versions of files.  This gain is
	    achieved at a large cost in terms of disk space,
	    however.</para>
	</listitem>

	<listitem>
	  <para><anchor id="cvsup-config-where">Where do you want to get
	    them from?</para>
	  
	  <para>We use the <literal>host=</literal> field to tell
	    <command>cvsup</command> where to obtain its updates.  Any
	    of the <link linkend="cvsup-mirrors">CVSup mirror
	      sites</link> will do, though you should try to select one
	    that is close to you in cyberspace.  In this example we will
	    use a fictional &os; distribution site,
	    <hostid role="fqdn">cvsup666.dragonflybsd.org</hostid>:</para>

	  <programlisting>*default host=cvsup666.dragonflybsd.org</programlisting>
	  
	  <para>You will need to change the host to one that actually
	    exists before running <application>CVSup</application>.
	    On any particular run of
	    <command>cvsup</command>, you can override the host  setting
	    on the command line, with <option>-h
	      <replaceable>hostname</replaceable></option>.</para>
	</listitem>
	
	<listitem>
	  <para><anchor id="cvsup-config-dest">Where do you want to put
	    them on your own machine?</para>
	  
	  <para>The <literal>prefix=</literal> field tells
	    <command>cvsup</command> where to put the files it receives.
	    In this example, we will put the source files directly into
	    our main source tree, <filename>/usr/src</filename>.  The
	    <filename>src</filename> directory is already implicit in
	    the collections we have chosen to receive, so this is the
	    correct specification:</para>
	  
	  <programlisting>*default prefix=/usr</programlisting>
	</listitem>

	<listitem>
	  <para><anchor id="cvsup-config-status">Where should
	    <command>cvsup</command> maintain its status files?</para>

	  <para>The <application>CVSup</application> client maintains
	    certain status files in what
	    is called the <quote>base</quote> directory.  These files
	    help <application>CVSup</application> to work more
	    efficiently, by keeping track of which updates you have
	    already received.  We will use the standard base directory,
	    <filename>/usr/local/etc/cvsup</filename>:</para>

	  <programlisting>*default base=/usr/local/etc/cvsup</programlisting>

	  <para>This setting is used by default if it is not specified
	    in the <filename>supfile</filename>, so we actually do not
	    need the above line.</para>
	  
	  <para>If your base directory does not already exist, now would
	    be a good time to create it.  The <command>cvsup</command>
	    client will refuse to run if the base directory does not
	    exist.</para>
	</listitem>

	<listitem>
	  <para>Miscellaneous <filename>supfile</filename>
	    settings:</para>
	  
	  <para>There is one more line of boiler plate that normally
	    needs to be present in the
	    <filename>supfile</filename>:</para>

	  <programlisting>*default release=cvs delete use-rel-suffix compress</programlisting>

	  <para><literal>release=cvs</literal> indicates that the server
	    should get its information out of the main &os; CVS
	    repository.  This is virtually always the case, but there
	    are other possibilities which are beyond the scope of this
	    discussion.</para>
	  
	  <para><literal>delete</literal> gives
	    <application>CVSup</application> permission to delete files.
	    You should always specify this, so that
	    <application>CVSup</application> can keep your source tree
	    fully up-to-date.  <application>CVSup</application> is
	    careful to delete only those files for which it is
	    responsible.  Any extra files you happen to have will be
	    left strictly alone.</para>
	  
	  <para><literal>use-rel-suffix</literal> is ... arcane.  If you
	    really want to know about it, see the &man.cvsup.1; manual
	    page.  Otherwise, just specify it and do not worry about
	    it.</para>

	  <para><literal>compress</literal> enables the use of
	    gzip-style compression on the communication channel.  If
	    your network link is T1 speed or faster, you probably should
	    not use compression.  Otherwise, it helps
	    substantially.</para>
	</listitem>

	<listitem>
	  <para>Putting it all together:</para>

	  <para>Here is the entire <filename>supfile</filename> for our
	    example:</para>

	  <programlisting>*default tag=.
*default host=cvsup666.dragonflybsd.org
*default prefix=/usr
*default base=/usr/local/etc/cvsup
*default release=cvs delete use-rel-suffix compress

src-all</programlisting>
	</listitem>
      </itemizedlist>
      <sect3>
       <title>The <filename>refuse</filename> File</title>

       <para>As mentioned above, <application>CVSup</application> uses
       a <emphasis>pull method</emphasis>. Basically, this means that
       you connect to the <application>CVSup</application> server, and
       it says, <quote>Here is what you can download from
       me...</quote>, and your client responds <quote>OK, I will take
       this, this, this, and this.</quote> In the default
       configuration, the <application>CVSup</application> client will
       take every file associated with the collection and tag you
       chose in the configuration file. However, this is not always
       what you want, especially if you are synching the <filename>doc</filename>, <filename>ports</filename>, or
       <filename>www</filename> trees &mdash; most people cannot read four or five
       languages, and therefore they do not need to download the
       language-specific files. If you are
       <application>CVSup</application>ing the ports collection, you
       can get around this by specifying each collection individually
       (e.g., <emphasis>ports-astrology</emphasis>,
       <emphasis>ports-biology</emphasis>, etc instead of simply
       saying <emphasis>ports-all</emphasis>). However, since the <filename>doc</filename>
       and <filename>www</filename> trees do not have language-specific collections, you
       must use one of <application>CVSup</application>'s many nifty
       features: the <filename>refuse</filename> file.</para>

       <para>The <filename>refuse</filename> file essentially tells
       <application>CVSup</application> that it should not take every
       single file from a collection; in other words, it tells the
       client to <emphasis>refuse</emphasis> certain files from the
       server. The <filename>refuse</filename> file can be found (or, if you do not yet
       have one, should be placed) in
       <filename><replaceable>base</replaceable>/sup/</filename>.
       <replaceable>base</replaceable> is defined in your <filename>supfile</filename>; by
       default, <replaceable>base</replaceable> is
       <filename>/usr/local/etc/cvsup</filename>, 
       which means that by default the <filename>refuse</filename> file is
       <filename>/usr/local/etc/cvsup/sup/refuse</filename>.</para>

       <para>The <filename>refuse</filename> file has a very simple format; it simply
       contains the names of files or directories that you do not wish
       to download.  For example, if you cannot speak any languages other
       than English and some German, and you do not feel the need to use
       the German applications (or applications for any other
       languages, except for English), you can put the following in your
       <filename>refuse</filename> file:</para>

       <screen>ports/chinese
ports/french
ports/german
ports/hebrew
ports/hungarian
ports/japanese
ports/korean
ports/polish
ports/portuguese
ports/russian
ports/ukrainian
ports/vietnamese
doc/da_*
doc/de_*
doc/el_*
doc/es_*
doc/fr_*
doc/it_*
doc/ja_*
doc/nl_*
doc/no_*
doc/pl_*
doc/pt_*
doc/ru_*
doc/sr_*
doc/zh_*</screen>

       <para>and so forth for the other languages (you can find the
       full list by browsing the <ulink
       url="http://www.FreeBSD.org/cgi/cvsweb.cgi/">FreeBSD
       CVS repository</ulink>).</para>

       <para>With this very useful feature, those users who are on
       slow links or pay by the minute for their Internet connection
       will be able to save valuable time as they will no longer need
       to download files that they will never use. For more
       information on <filename>refuse</filename> files and other neat
       features of <application>CVSup</application>, please view its
       manual page.</para> 
      </sect3>
    </sect2>
    
    <sect2>
      <title>Running <application>CVSup</application></title>
      
      <para>You are now ready to try an update.  The command line for
	doing this is quite simple:</para>

      <screen>&prompt.root; <userinput>cvsup <replaceable>supfile</replaceable></userinput></screen>

      <para>where <filename><replaceable>supfile</replaceable></filename>
	is of course the name of the <filename>supfile</filename> you have just created. 
	Assuming you are running under X11, <command>cvsup</command>
	will display a GUI window with some buttons to do the usual
	things.  Press the <guibutton>go</guibutton> button, and watch it
	run.</para>
      
      <para>Since you are updating your actual
	<filename>/usr/src</filename> tree in this example, you will
	need to run the program as <username>root</username> so that
	<command>cvsup</command> has the permissions it needs to update
	your files.  Having just created your configuration file, and
	having never used this program before, that might
	understandably make you nervous. There is an easy way to do a
	trial run without touching your precious files.  Just create an
	empty directory somewhere convenient, and name it as an extra
	argument on the command line:</para>

      <screen>&prompt.root; <userinput>mkdir /var/tmp/dest</userinput>
&prompt.root; <userinput>cvsup supfile /var/tmp/dest</userinput></screen>
      
      <para>The directory you specify will be used as the destination
	directory for all file updates.
	<application>CVSup</application> will examine your usual files
	in <filename>/usr/src</filename>, but it will not modify or
	delete any of them.  Any file updates will instead land in
	<filename>/var/tmp/dest/usr/src</filename>.
	<application>CVSup</application> will also leave its base
	directory status files untouched when run this way.  The new
	versions of those files will be written into the specified
	directory.  As long as you have read access to
	<filename>/usr/src</filename>, you do not even need to be
	<username>root</username> to perform this kind of trial run.</para>
      
      <para>If you are not running X11 or if you just do not like GUIs,
	you should add a couple of options to the command line when you
	run <command>cvsup</command>:</para>
      
      <screen>&prompt.root; <userinput>cvsup -g -L 2 <replaceable>supfile</replaceable></userinput></screen>
	    
      <para>The <option>-g</option> tells
	<application>CVSup</application> not to use its GUI.  This is
	automatic if you are not running X11, but otherwise you have to
	specify it.</para>
      
      <para>The <option>-L 2</option> tells 
	<application>CVSup</application> to print out the
	details of all the file updates it is doing.  There are three
	levels of verbosity, from <option>-L 0</option> to
	<option>-L 2</option>.  The default is 0, which means total
	silence except for error messages.</para>
      
      <para>There are plenty of other options available.  For a brief
	list of them, type <command>cvsup -H</command>.  For more
	detailed descriptions, see the manual page.</para>

      <para>Once you are satisfied with the way updates are working, you
	can arrange for regular runs of <application>CVSup</application>
	using &man.cron.8;.
	Obviously, you should not let <application>CVSup</application>
	use its GUI when running it from &man.cron.8;.</para>
    </sect2>

    <sect2 id="cvsup-collec">
      <title><application>CVSup</application> File Collections</title>
	    
      <para>The most commonly used collections are
	<literal>cvs-src</literal>, and
	<literal>cvs-dfports</literal>.</para>
      
      <variablelist>
	<varlistentry>
	  <term><literal>cvs-src</literal></term>
	  <listitem>
            <para>The &os; source code.</para>
	  </listitem>
	</varlistentry>
	      
	<varlistentry>
	  <term><literal>cvs-doc</literal></term>
	  <listitem>
            <para>Documentation.  This does not include the &os; website.</para>
	  </listitem>
	</varlistentry>
	      
	<varlistentry>
	  <term><literal>cvs-dfports</literal></term>
	  <listitem>
            <para>Overrides for the FreeBSD Ports Collection.</para>
	  </listitem>
	</varlistentry>
	      
	<varlistentry>
	  <term><literal>cvs-site</literal></term>
	  <listitem>
            <para>The &os; website code.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><literal>cvs-root</literal></term>
	  <listitem>
            <para>Basic CVS data.  This is only needed if you are pulling the RCS data.</para>
	  </listitem>
	</varlistentry>
     

      </variablelist>
    </sect2>

    <sect2>
      <title>For More Information</title>

      <para>For the <application>CVSup</application> FAQ and other 
	information about <application>CVSup</application>, see
	<ulink url="http://www.polstra.com/projects/freeware/CVSup/">The
	  CVSup Home Page</ulink>.</para>

      <para>Questions and bug reports should be addressed to the author
	of the program at <email>cvsup-bugs@polstra.com</email>.</para>
    </sect2>

    <sect2 id="cvsup-mirrors">
    <title>CVSup Sites</title>

    <para><link linkend="cvsup">CVSup</link> servers for &os; are running
      at the following sites:</para>

    &chap.mirrors.cvsup.inc;
    </sect2>
  </sect1>
  
  <sect1 id="cvs-tags">
    <title>CVS Tags</title>

    <para>When obtaining or updating sources from
      <application>cvs</application> and
      <application>CVSup</application> a revision tag (reference to a
      date in time) must be specified.</para>

    <para>A revision tag refers to either a particular line of &os;
      development, or a specific point in time.  The first type are called
      <quote>branch tags</quote>, the second type are called <quote>release
	tags</quote>.</para>

    <sect2>
      <title>Branch Tags</title>

      <para>The &os; tree has no branch tags at the current time.</para>
    </sect2>


    <sect2>
      <title>Release Tags</title>

      <para>These tags correspond to the &os; <filename>src/</filename>
	tree at a specific point in time, when a
	particular version was released.</para>

    <variablelist>
      <varlistentry>
	<!-- reed: todo: is this correct? -->
	<term>RELENG_1_0_RELEASE</term>

	<listitem>
	  <para>&os; 1.0</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>DragonFly_RELEASE_1_2</term>

	<listitem>
	  <para>&os; 1.2</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>DragonFly_1_0_REL</term>

	<listitem>
	  <para>&os; 1.0</para>
	</listitem>
      </varlistentry>
    </variablelist>

    </sect2>
  </sect1>


</appendix>

<!--
     Local Variables:
     mode: sgml
     sgml-declaration: "../appendix.decl"
     sgml-indent-data: t
     sgml-omittag: nil
     sgml-always-quote-attributes: t
     sgml-parent-document: ("../book.sgml" "part" "appendix")
     End:
-->

