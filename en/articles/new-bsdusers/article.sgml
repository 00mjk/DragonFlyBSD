<!-- $DragonFly: doc/en/articles/new-bsdusers/article.sgml,v 1.6 2007/03/22 13:05:38 justin Exp $ -->

<!DOCTYPE ARTICLE PUBLIC "-//DragonFlyBSD//DTD DocBook V4.1-Based Extension//EN" [
<!ENTITY % man PUBLIC "-//DragonFlyBSD//ENTITIES DocBook Manual Page Entities//EN">
%man;
<!ENTITY % mailing-lists PUBLIC "-//DragonFlyBSD//ENTITIES DocBook Mailing List Entities//EN">
%mailing-lists;
<!ENTITY % urls PUBLIC "-//DragonFlyBSD//ENTITIES DocBook URL Entities//EN">
%urls;

]>

<article>
  <articleinfo>
    <title>A Quick Start on DragonFly</title>

    <authorgroup>
      <author>
        <firstname>Justin</firstname>
        <surname>Sherrill</surname>
        <affiliation>
          <address><email>justin@shiningsilence.com</email></address>
        </affiliation>
      </author>
    </authorgroup>

    <pubdate>January 7, 2007</pubdate>

    <abstract>
      <para>This document covers a number of first steps to take with a 
      newly installed DragonFly system.  It assumes some experience with a 
      command line, and moves quickly.  Much of this information is covered 
      in further depth in the Handbook; the minimum is presented here for 
      the benefit of readers who are already familiar with the material, 
      or just impatient.</para>
    </abstract>
  </articleinfo>

  <sect1>
    <title>Keeping up to date</title>

    <para>cvsup, which is included in the base system, is used to copy fresh source code and up-to-date ports to 
    your system.  cvsup uses a configuration file to determine what to download.  
    A number of example files are stored in 
    <filename>/usr/share/examples/cvsup/</filename> and will be used here.</para>
    
    <sect2>
    <title>Pulling in userland and kernel sources</title>
   
    <para>In order to keep the operating system up to date, you need to pull 
    down the source code you want to compile and install. This includes the 
    userland and kernel source code. On the default of install of DragonFly, 
    these sources are not installed. The source code for the userland and 
    kernel are typically stored in <filename>/usr/src/</filename>.</para>

    <para>To keep up-to-date source in <filename>/usr/src/</filename>:

      <informalexample>
        <screen>&prompt.root; <userinput>cvsup -h DRAGONFLY-MIRROR /usr/share/examples/cvsup/DragonFly-src-supfile</userinput></screen>
      </informalexample>

    The -h option in the example above determines what server is used.  
    For DRAGONFLY-MIRROR, substitute a cvsup mirror listed on the 
    <ulink url="http://www.dragonflybsd.org/main/download.cgi">Download page</ulink> 
    on the DragonFly website.  </para>
   

   <para>'<filename>DragonFly-src-supfile</filename>' is a configuration 
   file for cvsup that will get the latest version of the source code and 
   put it in <filename>/usr/src</filename>. There are more example 
   configuration files in <filename>/usr/share/examples/cvsup/</filename> 
   and you can also create your own. The latest version is only recommended 
   for development; production systems should run the most recent release 
   of DragonFly.  For production systems, choose a particular 
   release tag, such as 
   '<filename>DragonFly-release1_6-supfile</filename>' tag.

    </sect2>
    
    <sect2>
    <title>Updating the operating system</title>
    
    <para>If your system is relatively quiescent, you can do this:</para>
    
      <informalexample>
<screen>&prompt.root; <userinput>cd /usr/src && make buildworld && make buildkernel</userinput>
&prompt.root; <userinput>make installkernel && make installworld && make upgrade</userinput>
&prompt.root; <userinput>reboot</userinput>
</screen>
      </informalexample>

    <para>If a build step fails, wait a short while and update using 
    <filename>cvsup</filename>.  DragonFly is under heavy development, and while it has 
    remained remarkably stable, it is possible someone was in the middle of a commit 
    while the source on disk was downloaded.  If it does not work on a second try, report 
    it to &a.bugs.name;.</para>
    
    <para>When sending a question to &a.bugs.name;, please describe what you were doing at the time 
    the error happened, and include the error data.</para>
    
    <para>If your problem gets solved, please post a followup message to &a.bugs.name explaining 
    what the fix was; this will help others in the future who encounter the same problem, or 
    people looking to fix unresolved problem reports.</para> 
    
    <para>If you have other programs running or users on your computer, it may be 
    a good idea to reboot to single-user mode before running the 
    installkernel or installworld  
    targets, as the installation process removes and reads system software.</para>

<!-- TODO: makevar maketarget -->

<!-- TODO: figure out what 'makevar maketarget' meant when I wrote it.  -->
<!-- I was sleepy.  - Justin -->
    
    <para>If you have a custom kernel config file in 
    <filename>/usr/src/sys/i386/conf</filename>, replace 
    <command>make buildkernel</command> and 
    <command>make installkernel</command> with 
    <command>make buildkernel KERNCONF=<replaceable>KERNELNAME</replaceable></command> 
    and <command>make installkernel KERNCONF=<replaceable>KERNELNAME</replaceable></command>, 
    where <replaceable>KERNELNAME</replaceable> is the name of that configuration file.</para>
    
    <para>Once a full buildworld/kernel has been done, 'quickkernel' and 'quickworld' can be 
    used instead for quicker results.  Drop back to buildworld/installworld if the 
    'quick' targets cause errors.</para>
    </sect2>
    
  </sect1>
  
  <sect1>
    <title>Installing software</title>
    
    <para>As of 1.4, DragonFly uses the 
    <ulink url="http://www.pkgsrc.org/">NetBSD Packages Collection</ulink> 
    (pkgsrc) for third-party software.</para>

    <para>To install pkgsrc (You must be root to do this):
    <informalexample>
	    <screen>&prompt.root; <userinput> cd /usr</userinput>
    &prompt.root; <userinput>cvs -d anoncvs@anoncvs.us.netbsd.org:/cvsroot co pkgsrc</userinput></screen>
    </informalexample>

    To build and install a package from source:
    <informalexample>
	    <screen>&prompt.root; <userinput> cd /usr/pkgsrc/misc/screen</userinput>
    &prompt.root; <userinput>bmake install clean</userinput></screen>
    </informalexample>

    To install a binary package (substitute URL of binary package here):
    <informalexample>
		<screen>&prompt.root; <userinput> pkg_add URL</userinput></screen>
    </informalexample>

    For a quick guide, please see the 
    <ulink url="http://wiki.dragonflybsd.org/cgi/moin.cgi/HowToPkgsrc">pkgsrc HOWTO</ulink> on the DragonFly wiki. This 
    howto covers installation and maintenance of pkgsrc.</para>
    

  </sect1>  
  
  <sect1>
    <title>Getting to a Desktop</title>
    
    <para>The two major requirements to get a "desktop" computer is installing 
    Xorg, and installing a window environment.</para>
    
    <sect2>
    
    <title>Xorg </title>
    <para>The easiest way to get Xorg installed is to add the package:</para>
    
    <informalexample>
      <screen>&prompt.root; <userinput>pkg_add ftp://packages.stura.uni-rostock.de/pkgsrc-current/DragonFly/DEVELOPMENT/i386/All/xorg.tgz</userinput></screen>
    </informalexample>
    
    <para>It is possible, as <username>root</username>, to have Xorg probe 
    your hardware, after installation, and build a 
    suitable configuration file for your machine.</para>
    
    <informalexample>
      <screen>&prompt.root; <userinput>Xorg -configure > xorg.conf.new</userinput></screen>
    </informalexample>
    
    <para>It's also possible to use the programs xorgcfg or xorgconfig to generate a 
    configuration file.  xorgcfg is graphical, and autoconfigures itself for display.  If 
    it has trouble displaying, try it with the '-textmode' argument.  As a final option, 
    xorgonfig is a text program that will attempt to display choices for building a working 
    configuration.  Both require some knowledge of the hardware located inside the computer.  
    It may be useful to know the video card chipset and the hsync and vsync of the 
    monitor being used.</para>
    
    <para>Once the XF86Config.new file is created, try starting XFree86 with that 
    as the config file.</para>
    
    <informalexample>
      <screen>&prompt.root; <userinput>XFree86 -config xorg.conf.new</userinput></screen>
    </informalexample>
    
    <para>Assuming all goes well, this will place you in a minimal environment, using 
    the program twm for layout.  You'll see several xterms on the screen, from which   
    <keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>Backspace</keycap></keycombo>
    will exit you back out.  If everything does not go well - 
    the screen goes blank, or is garbled - 
    <keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>Backspace</keycap></keycombo>
    will end your session and you can modify the config file (see man Xorg) and check the log 
    from Xorg's startup in <filename>/var/log/Xorg.0.log</filename>.</para>
    
    <para>Once the configuration file is working satisfactorily, copy it to a location where 
    Xorg will be able to see it by default.

    <informalexample>
<screen>&prompt.root; <userinput>mkdir /etc/X11</userinput> (if it doesn't already exist)
&prompt.root; <userinput>cp xorg.conf.new /etc/X11/xorg.conf</userinput></screen>
    </informalexample>
      
    After this file is copied, you can use start Xorg with 
    <filename>/usr/pkg/xorg/bin/startx</filename> and it will read 
    your newly created configuration file.</para>
    </sect2>
    <sect2>
    
    <title>Environment</title>
    <para>The easiest way to have a usable desktop environment is to install one of the 
    major desktop environments - KDE or Gnome.</para>
    
    <informalexample>
<screen>&prompt.root; <userinput>pkg_add ftp://packages.stura.uni-rostock.de/pkgsrc-current/DragonFly/DEVELOPMENT/i386/All/kde.tgz</userinput></screen>
    </informalexample>

<para><emphasis>or</emphasis></para>

    <informalexample>
<screen>&prompt.root; <userinput>pkg_add ftp://packages.stura.uni-rostock.de/pkgsrc-current/DragonFly/DEVELOPMENT/i386/All/gnome</userinput></screen>
    </informalexample>
    
    <para>To enable KDE after installing, put 'startkde' into a file called .xinitrc in your 
    home directory.   Typing "startx" after that point (assuming you have X Windows installed 
    and configured) will get you a graphical desktop.</para>
    
    <informalexample>
      <screen>&prompt.root; <userinput>echo "startkde" > ~/.xinitrc</userinput></screen>
    </informalexample>

    <para>A similar procedure can enable the Gnome Desktop instead.</para>
    
    <informalexample>
      <screen>&prompt.root; <userinput>echo "gnome-session" > ~/.xinitrc</userinput></screen>
    </informalexample>

    </sect2>
  
</sect1>

<sect1>
  <title>Other resources</title>
  
      <itemizedlist>
	<listitem>
	  <para>The DragonFly BSD website: 
	    <ulink url="http://www.dragonflybsd.org/">http://www.dragonflybsd.org/</ulink></para>
	</listitem>

	<listitem>
	  <para>The DragonFly BSD Handbook: 
            <ulink url="http://leaf.dragonflybsd.org/~justin/handbook/">http://leaf.dragonflybsd.org/~justin/handbook/</ulink></para>
	</listitem>

        <listitem>
          <para>DragonFly BSD Mailing List Archives
	    <ulink url="http://leaf.dragonflybsd.org/mailarchive/">http://leaf.dragonflybsd.org/mailarchive/</ulink></para>
        </listitem>

	<listitem>
	  <para>The DragonFly BSD Log
	    <ulink url="http://www.shiningsilence.com/dbsdlog/">http://www.shiningsilence.com/dbsdlog/</ulink></para>
	</listitem>
	
	<listitem>
	  <para>The DragonFly BSD Bugzilla bug tracker
	    <ulink url="http://bugs.dragonflybsd.org/">http://bugs.dragonflybsd.org/</ulink></para>
	</listitem>

      </itemizedlist>

  </sect1>
</article>
