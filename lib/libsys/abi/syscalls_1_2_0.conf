# System calls starting at 1.2.0-release.
#
# $DragonFly: src/lib/libsys/abi/syscalls_1_2_0.conf,v 1.1 2005/05/08 18:14:54 dillon Exp $

BASE map_syscalls_1_2_0;

ADD 0 {
    function  int nosys(void);
    implementation direct;
}

ADD 1 {
    function  void sys_exit(int rval);
    implementation direct;
}

ADD 2 {
    function  int fork(void);
    implementation direct;
}

ADD 3 {
    function  ssize_t read(int fd, void_ptr buf, size_t nbyte);
    implementation direct;
}

ADD 4 {
    function  ssize_t write(int fd, const_void_ptr buf, size_t nbyte);
    implementation direct;
}

ADD 5 {
    function  int open(char_ptr path, int flags, int mode);
    implementation direct;
}

ADD 6 {
    function  int close(int fd);
    implementation direct;
}

ADD 7 {
    function  int wait4(int pid, int_ptr status, int options,
			rusage_1_2_0_ptr rusage);
    implementation direct;
}

ADD 9 {
    function  int link(char_ptr path, char_ptr link);
    implementation direct;
}

ADD 10 {
    function  int unlink(char_ptr path);
    implementation direct;
}

ADD 12 {
    function  int chdir(char_ptr path);
    implementation direct;
}

ADD 13 {
    function  int fchdir(int fd);
    implementation direct;
}

ADD 14 {
    function  int mknod(char_ptr path, int mode, int dev);
    implementation direct;
}

ADD 15 {
    function  int chmod(char_ptr path, int mode);
    implementation direct;
}

ADD 16 {
    function  int chown(char_ptr path, int uid, int gid);
    implementation direct;
}

ADD 17 {
    function  int obreak(char_ptr nsize);
    implementation direct;
}

ADD 18 {
    function  int getfsstat(statfs_1_2_0_ptr buf, long bufsize,
			    int flags);
    implementation direct;
}

ADD 20 {
    function  pid_t getpid(void);
    implementation direct;
}

ADD 21 {
    function  int mount(char_ptr type, char_ptr path, int flags, 
			caddr_t data);
    implementation direct;
}

ADD 22 {
    function  int unmount(char_ptr path, int flags);
    implementation direct;
}

ADD 23 {
    function  int setuid(uid_t uid);
    implementation direct;
}

ADD 24 {
    function  uid_t getuid(void);
    implementation direct;
}

ADD 25 {
    function  uid_t geteuid(void);
    implementation direct;
}

ADD 26 {
    function  int ptrace(int req, pid_t pid, caddr_t addr, 
			 int data);
    implementation direct;
}

ADD 27 {
    function  int recvmsg(int s, msghdr_1_2_0_ptr msg, int flags);
    implementation direct;
}

ADD 28 {
    function  int sendmsg(int s, caddr_t msg, int flags);
    implementation direct;
}

ADD 29 {
    function  int recvfrom(int s, caddr_t buf, size_t len, 
			   int flags, caddr_t from, int_ptr fromlenaddr);
    implementation direct;
}

ADD 30 {
    function  int accept(int s, caddr_t name, int_ptr anamelen);
    implementation direct;
}

ADD 31 {
    function  int getpeername(int fdes, caddr_t asa, int_ptr alen);
    implementation direct;
}

ADD 32 {
    function  int getsockname(int fdes, caddr_t asa, int_ptr alen);
    implementation direct;
}

ADD 33 {
    function  int access(char_ptr path, int flags);
    implementation direct;
}

ADD 34 {
    function  int chflags(char_ptr path, int flags);
    implementation direct;
}

ADD 35 {
    function  int fchflags(int fd, int flags);
    implementation direct;
}

ADD 36 {
    function  int sync(void);
    implementation direct;
}

ADD 37 {
    function  int kill(int pid, int signum);
    implementation direct;
}

ADD 39 {
    function  pid_t getppid(void);
    implementation direct;
}

ADD 41 {
    function  int dup(u_int fd);
    implementation direct;
}

ADD 42 {
    function  int pipe(void);
    implementation direct;
}

ADD 43 {
    function  gid_t getegid(void);
    implementation direct;
}

ADD 44 {
    function  int profil(caddr_t samples, size_t size, 
			 size_t offset, u_int scale);
    implementation direct;
}

ADD 45 {
    function  int ktrace(const_char_ptr fname, int ops, int facs, int pid);
    implementation direct;
}

ADD 47 {
    function  gid_t getgid(void);
    implementation direct;
}

ADD 49 {
    function  int getlogin(char_ptr namebuf, u_int namelen);
    implementation direct;
}

ADD 50 {
    function  int setlogin(char_ptr namebuf);
    implementation direct;
}

ADD 51 {
    function  int acct(char_ptr path);
    implementation direct;
}

ADD 53 {
    function  int sigaltstack(stack_t_ptr ss, stack_t_ptr oss);
    implementation direct;
}

ADD 54 {
    function  int ioctl(int fd, u_long com, caddr_t data);
    implementation direct;
}

ADD 55 {
    function  int reboot(int opt);
    implementation direct;
}

ADD 56 {
    function  int revoke(char_ptr path);
    implementation direct;
}

ADD 57 {
    function  int symlink(char_ptr path, char_ptr link);
    implementation direct;
}

ADD 58 {
    function  int readlink(char_ptr path, char_ptr buf, int count);
    implementation direct;
}

ADD 59 {
    function  int execve(char_ptr fname, char_ptr_ptr argv, char_ptr_ptr envv);
    implementation direct;
}

ADD 60 {
    function  int umask(int newmask);
    implementation direct;
}

ADD 61 {
    function  int chroot(char_ptr path);
    implementation direct;
}

ADD 65 {
    function  int msync(void_ptr addr, size_t len, int flags);
    implementation direct;
}

ADD 66 {
    function  int vfork(void);
    implementation direct;
}

ADD 69 {
    function  int sbrk(int incr);
    implementation direct;
}

ADD 70 {
    function  int sstk(int incr);
    implementation direct;
}

ADD 72 {
    function  int ovadvise(int anom);
    implementation direct;
}

ADD 73 {
    function  int munmap(void_ptr addr, size_t len);
    implementation direct;
}

ADD 74 {
    function  int mprotect(const_void_ptr addr, size_t len, int prot);
    implementation direct;
}

ADD 75 {
    function  int madvise(void_ptr addr, size_t len, int behav);
    implementation direct;
}

ADD 78 {
    function  int mincore(const_void_ptr addr, size_t len, char_ptr vec);
    implementation direct;
}

ADD 79 {
    function  int getgroups(u_int gidsetsize, gid_t_ptr gidset);
    implementation direct;
}

ADD 80 {
    function  int setgroups(u_int gidsetsize, gid_t_ptr gidset);
    implementation direct;
}

ADD 81 {
    function  int getpgrp(void);
    implementation direct;
}

ADD 82 {
    function  int setpgid(int pid, int pgid);
    implementation direct;
}

ADD 83 {
    function  int setitimer(u_int which, itimerval_1_2_0_ptr itv, 
			    itimerval_1_2_0_ptr oitv);
    implementation direct;
}

ADD 85 {
    function  int swapon(char_ptr name);
    implementation direct;
}

ADD 86 {
    function  int getitimer(u_int which, itimerval_1_2_0_ptr itv);
    implementation direct;
}

ADD 89 {
    function  int getdtablesize(void);
    implementation direct;
}

ADD 90 {
    function  int dup2(u_int from, u_int to);
    implementation direct;
}

ADD 92 {
    function  int fcntl(int fd, int cmd, long arg);
    implementation direct;
}

ADD 93 {
    function  int select(int nd, fd_set_ptr in, fd_set_ptr ou, 
			 fd_set_ptr ex, timeval_1_2_0_ptr tv);
    implementation direct;
}

ADD 95 {
    function  int fsync(int fd);
    implementation direct;
}

ADD 96 {
    function  int setpriority(int which, int who, int prio);
    implementation direct;
}

ADD 97 {
    function  int socket(int domain, int type, int protocol);
    implementation direct;
}

ADD 98 {
    function  int connect(int s, caddr_t name, int namelen);
    implementation direct;
}

ADD 99 {
    function  int accept(int s, caddr_t name, int_ptr anamelen);
    implementation direct;
}

ADD 100 {
    function  int getpriority(int which, int who);
    implementation direct;
}

ADD 104 {
    function  int bind(int s, caddr_t name, int namelen);
    implementation direct;
}

ADD 105 {
    function  int setsockopt(int s, int level, int name, 
			     caddr_t val, int valsize);
    implementation direct;
}

ADD 106 {
    function  int listen(int s, int backlog);
    implementation direct;
}

ADD 116 {
    function  int gettimeofday(timeval_1_2_0_ptr tp, timezone_1_2_0_ptr tzp);
    implementation direct;
}

ADD 117 {
    function  int getrusage(int who, rusage_1_2_0_ptr rusage);
    implementation direct;
}

ADD 118 {
    function  int getsockopt(int s, int level, int name, 
			     caddr_t val, int_ptr avalsize);
    implementation direct;
}

ADD 120 {
    function  int readv(int fd, iovec_1_2_0_ptr iovp, u_int iovcnt);
    implementation direct;
}

ADD 121 {
    function  int writev(int fd, iovec_1_2_0_ptr iovp, u_int iovcnt);
    implementation direct;
}

ADD 122 {
    function  int settimeofday(timeval_1_2_0_ptr tv, timezone_1_2_0_ptr tzp);
    implementation direct;
}

ADD 123 {
    function  int fchown(int fd, int uid, int gid);
    implementation direct;
}

ADD 124 {
    function  int fchmod(int fd, int mode);
    implementation direct;
}

ADD 125 {
    function  int recvfrom(int s, caddr_t buf, size_t len, 
			   int flags, caddr_t from, int_ptr fromlenaddr);
    implementation direct;
}

ADD 126 {
    function  int setreuid(int ruid, int euid);
    implementation direct;
}

ADD 127 {
    function  int setregid(int rgid, int egid);
    implementation direct;
}

ADD 128 {
    function  int rename(char_ptr from, char_ptr to);
    implementation direct;
}

ADD 131 {
    function  int flock(int fd, int how);
    implementation direct;
}

ADD 132 {
    function  int mkfifo(char_ptr path, int mode);
    implementation direct;
}

ADD 133 {
    function  int sendto(int s, caddr_t buf, size_t len, 
			 int flags, caddr_t to, int tolen);
    implementation direct;
}

ADD 134 {
    function  int shutdown(int s, int how);
    implementation direct;
}

ADD 135 {
    function  int socketpair(int domain, int type, int protocol, int_ptr rsv);
    implementation direct;
}

ADD 136 {
    function  int mkdir(char_ptr path, int mode);
    implementation direct;
}

ADD 137 {
    function  int rmdir(char_ptr path);
    implementation direct;
}

ADD 138 {
    function  int utimes(char_ptr path, timeval_1_2_0_ptr tptr);
    implementation direct;
}

ADD 140 {
    function  int adjtime(timeval_1_2_0_ptr delta, timeval_1_2_0_ptr olddelta);
    implementation direct;
}

ADD 147 {
    function  int setsid(void);
    implementation direct;
}

ADD 148 {
    function  int quotactl(char_ptr path, int cmd, int uid, caddr_t arg);
    implementation direct;
}

ADD 150 {
    function  int getsockname(int fdec, caddr_t asa, int_ptr alen);
    implementation direct;
}

ADD 155 {
    function  int nfssvc(int flag, caddr_t argp);
    implementation direct;
}

ADD 157 {
    function  int statfs(char_ptr path, statfs_1_2_0_ptr buf);
    implementation direct;
}

ADD 158 {
    function  int fstatfs(int fd, statfs_1_2_0_ptr buf);
    implementation direct;
}

ADD 161 {
    function  int getfh(char_ptr fname, fhandle_1_2_0_ptr fhp);
    implementation direct;
}

ADD 162 {
    function  int getdomainname(char_ptr domainname, int len);
    implementation direct;
}

ADD 163 {
    function  int setdomainname(char_ptr domainname, int len);
    implementation direct;
}

ADD 164 {
    function  int uname(utsname_1_2_0_ptr name);
    implementation direct;
}

ADD 165 {
    function  int sysarch(int op, char_ptr parms);
    implementation direct;
}

ADD 166 {
    function  int rtprio(int function, pid_t pid, rtprio_1_2_0_ptr rtp);
    implementation direct;
}

ADD 169 {
    function  int semsys(int which, int a2, int a3, int a4, int a5);
    implementation direct;
}

ADD 170 {
    function  int msgsys(int which, int a2, int a3, int a4, int a5, int a6);
    implementation direct;
}

ADD 171 {
    function  int shmsys(int which, int a2, int a3, int a4);
    implementation direct;
}

ADD 173 {
    function  ssize_t pread(int fd, void_ptr buf, size_t nbyte, 
			    int pad, off_t offset);
    implementation direct;
}

ADD 174 {
    function  ssize_t pwrite(int fd, const_void_ptr buf, 
			     size_t nbyte, int pad, off_t offset);
    implementation direct;
}

ADD 176 {
    function  int ntp_adjtime(timex_1_2_0_ptr tp);
    implementation direct;
}

ADD 181 {
    function  int setgid(gid_t gid);
    implementation direct;
}

ADD 182 {
    function  int setegid(gid_t egid);
    implementation direct;
}

ADD 183 {
    function  int seteuid(uid_t euid);
    implementation direct;
}

ADD 188 {
    function  int stat(char_ptr path, stat_1_2_0_ptr ub);
    implementation direct;
}

ADD 189 {
    function  int fstat(int fd, stat_1_2_0_ptr sb);
    implementation direct;
}

ADD 190 {
    function  int lstat(char_ptr path, stat_1_2_0_ptr ub);
    implementation direct;
}

ADD 191 {
    function  int pathconf(char_ptr path, int name);
    implementation direct;
}

ADD 192 {
    function  int fpathconf(int fd, int name);
    implementation direct;
}

ADD 194 {
    function  int getrlimit(u_int which, rlimit_1_2_0_ptr rlp);
    implementation direct;
}

ADD 195 {
    function  int setrlimit(u_int which, rlimit_1_2_0_ptr rlp);
    implementation direct;
}

ADD 196 {
    function  int getdirentries(int fd, char_ptr buf, u_int count, long_ptr basep);
    implementation direct;
}

ADD 197 {
    function  caddr_t mmap(caddr_t addr, size_t len, int prot, 
			   int flags, int fd, int pad, off_t pos);
    implementation direct;
}

ADD 198 {
    function  int nosys(void);
    implementation direct;
}

ADD 199 {
    function  off_t lseek(int fd, int pad, off_t offset, int whence);
    implementation direct;
}

ADD 200 {
    function  int truncate(char_ptr path, int pad, off_t length);
    implementation direct;
}

ADD 201 {
    function  int ftruncate(int fd, int pad, off_t length);
    implementation direct;
}

ADD 202 {
    function  int __sysctl(int_ptr name, u_int namelen, void_ptr old, 
			   size_t_ptr oldlenp, void_ptr new, size_t newlen);
    implementation direct;
}

ADD 203 {
    function  int mlock(const_void_ptr addr, size_t len);
    implementation direct;
}

ADD 204 {
    function  int munlock(const_void_ptr addr, size_t len);
    implementation direct;
}

ADD 205 {
    function  int undelete(char_ptr path);
    implementation direct;
}

ADD 206 {
    function  int futimes(int fd, timeval_1_2_0_ptr tptr);
    implementation direct;
}

ADD 207 {
    function  int getpgid(pid_t pid);
    implementation direct;
}

ADD 209 {
    function  int poll(pollfd_1_2_0_ptr fds, u_int nfds, int timeout);
    implementation direct;
}

ADD 220 {
    function  int __semctl(int semid, int semnum, int cmd, semun_ptr arg);
    implementation direct;
}

ADD 221 {
    function  int semget(key_t key, int nsems, int semflg);
    implementation direct;
}

ADD 222 {
    function  int semop(int semid, sembuf_1_2_0_ptr sops, u_int nsops);
    implementation direct;
}

ADD 224 {
    function  int msgctl(int msqid, int cmd, msqid_ds_1_2_0_ptr buf);
    implementation direct;
}

ADD 225 {
    function  int msgget(key_t key, int msgflg);
    implementation direct;
}

ADD 226 {
    function  int msgsnd(int msqid, void_ptr msgp, size_t msgsz, int msgflg);
    implementation direct;
}

ADD 227 {
    function  int msgrcv(int msqid, void_ptr msgp, size_t msgsz, 
			 long msgtyp, int msgflg);
    implementation direct;
}

ADD 228 {
    function  int shmat(int shmid, void_ptr shmaddr, int shmflg);
    implementation direct;
}

ADD 229 {
    function  int shmctl(int shmid, int cmd, shmid_ds_1_2_0_ptr buf);
    implementation direct;
}

ADD 230 {
    function  int shmdt(void_ptr shmaddr);
    implementation direct;
}

ADD 231 {
    function  int shmget(key_t key, int size, int shmflg);
    implementation direct;
}

ADD 232 {
    function  int clock_gettime(clockid_t clock_id, timespec_1_2_0_ptr tp);
    implementation direct;
}

ADD 233 {
    function  int clock_settime(clockid_t clock_id, 
				const_timespec_1_2_0_ptr tp);
    implementation direct;
}

ADD 234 {
    function  int clock_getres(clockid_t clock_id, timespec_1_2_0_ptr tp);
    implementation direct;
}

ADD 240 {
    function  int nanosleep(const_timespec_1_2_0_ptr rqtp, 
			    timespec_1_2_0_ptr rmtp);
    implementation direct;
}

ADD 250 {
    function  int minherit(void_ptr addr, size_t len, int inherit);
    implementation direct;
}

ADD 251 {
    function  int rfork(int flags);
    implementation direct;
}

ADD 252 {
    function  int openbsd_poll(pollfd_1_2_0_ptr fds, u_int nfds, int timeout);
    implementation direct;
}

ADD 253 {
    function  int issetugid(void);
    implementation direct;
}

ADD 254 {
    function  int lchown(char_ptr path, int uid, int gid);
    implementation direct;
}

ADD 272 {
    function  int getdents(int fd, char_ptr buf, size_t count);
    implementation direct;
}

ADD 274 {
    function  int lchmod(char_ptr path, mode_t mode);
    implementation direct;
}

ADD 275 {
    function  int lchown(char_ptr path, uid_t uid, gid_t gid);
    implementation direct;
}

ADD 276 {
    function  int lutimes(char_ptr path, timeval_1_2_0_ptr tptr);
    implementation direct;
}

ADD 277 {
    function  int msync(void_ptr addr, size_t len, int flags);
    implementation direct;
}

ADD 278 {
    function  int nstat(char_ptr path, nstat_1_2_0_ptr ub);
    implementation direct;
}

ADD 279 {
    function  int nfstat(int fd, nstat_1_2_0_ptr sb);
    implementation direct;
}

ADD 280 {
    function  int nlstat(char_ptr path, nstat_1_2_0_ptr ub);
    implementation direct;
}

ADD 297 {
    function  int fhstatfs(const_fhandle_1_2_0_ptr u_fhp, 
			   statfs_1_2_0_ptr buf);
    implementation direct;
}

ADD 298 {
    function  int fhopen(const_fhandle_1_2_0_ptr u_fhp, int flags);
    implementation direct;
}

ADD 299 {
    function  int fhstat(const_fhandle_1_2_0_ptr u_fhp, stat_1_2_0_ptr sb);
    implementation direct;
}

ADD 300 {
    function  int modnext(int modid);
    implementation direct;
}

ADD 301 {
    function  int modstat(int modid, module_stat_1_2_0_ptr stat);
    implementation direct;
}

ADD 302 {
    function  int modfnext(int modid);
    implementation direct;
}

ADD 303 {
    function  int modfind(const_char_ptr name);
    implementation direct;
}

ADD 304 {
    function  int kldload(const_char_ptr file);
    implementation direct;
}

ADD 305 {
    function  int kldunload(int fileid);
    implementation direct;
}

ADD 306 {
    function  int kldfind(const_char_ptr file);
    implementation direct;
}

ADD 307 {
    function  int kldnext(int fileid);
    implementation direct;
}

ADD 308 {
    function  int kldstat(int fileid, kld_file_stat_1_2_0_ptr stat);
    implementation direct;
}

ADD 309 {
    function  int kldfirstmod(int fileid);
    implementation direct;
}

ADD 310 {
    function  int getsid(pid_t pid);
    implementation direct;
}

ADD 311 {
    function  int setresuid(uid_t ruid, uid_t euid, uid_t suid);
    implementation direct;
}

ADD 312 {
    function  int setresgid(gid_t rgid, gid_t egid, gid_t sgid);
    implementation direct;
}

ADD 314 {
    function  int aio_return(aiocb_1_2_0_ptr aiocbp);
    implementation direct;
}

ADD 315 {
    function  int aio_suspend(aiocb_1_2_0_ptr_const_ptr aiocbp, int nent, 
			      const_timespec_1_2_0_ptr timeout);
    implementation direct;
}

ADD 316 {
    function  int aio_cancel(int fd, aiocb_1_2_0_ptr aiocbp);
    implementation direct;
}

ADD 317 {
    function  int aio_error(aiocb_1_2_0_ptr aiocbp);
    implementation direct;
}

ADD 318 {
    function  int aio_read(aiocb_1_2_0_ptr aiocbp);
    implementation direct;
}

ADD 319 {
    function  int aio_write(aiocb_1_2_0_ptr aiocbp);
    implementation direct;
}

ADD 320 {
    function  int lio_listio(int mode, aiocb_1_2_0_ptr_const_ptr acb_list,
			     int nent, sigevent_1_2_0_ptr sig);
    implementation direct;
}

ADD 321 {
    function  int yield(void);
    implementation direct;
}

ADD 322 {
    function  int thr_sleep(const_timespec_1_2_0_ptr timeout);
    implementation direct;
}

ADD 323 {
    function  int thr_wakeup(pid_t pid);
    implementation direct;
}

ADD 324 {
    function  int mlockall(int how);
    implementation direct;
}

ADD 325 {
    function  int munlockall(void);
    implementation direct;
}

ADD 326 {
    function  int __getcwd(u_char_ptr buf, u_int buflen);
    implementation direct;
}

ADD 327 {
    function  int sched_setparam (pid_t pid, 
				  const_sched_param_1_2_0_ptr param);
    implementation direct;
}

ADD 328 {
    function  int sched_getparam (pid_t pid, sched_param_1_2_0_ptr param);
    implementation direct;
}

ADD 329 {
    function  int sched_setscheduler (pid_t pid, int policy,
				      const_sched_param_1_2_0_ptr param);
    implementation direct;
}

ADD 330 {
    function  int sched_getscheduler (pid_t pid);
    implementation direct;
}

ADD 331 {
    function  int sched_yield (void);
    implementation direct;
}

ADD 332 {
    function  int sched_get_priority_max (int policy);
    implementation direct;
}

ADD 333 {
    function  int sched_get_priority_min (int policy);
    implementation direct;
}

ADD 334 {
    function  int sched_rr_get_interval (pid_t pid, 
					 timespec_1_2_0_ptr interval);
    implementation direct;
}

ADD 335 {
    function  int utrace(const_void_ptr addr, size_t len);
    implementation direct;
}

ADD 337 {
    function  int kldsym(int fileid, int cmd, void_ptr data);
    implementation direct;
}

ADD 338 {
    function  int jail(jail_1_2_0_ptr jail);
    implementation direct;
}

ADD 340 {
    function  int sigprocmask(int how, const_sigset_t_ptr set, sigset_t_ptr oset);
    implementation direct;
}

ADD 341 {
    function  int sigsuspend(const_sigset_t_ptr sigmask);
    implementation direct;
}

ADD 342 {
    function  int sigaction(int sig, const_sigaction_1_2_0_ptr act, 
			    sigaction_1_2_0_ptr oact);
    implementation direct;
}

ADD 343 {
    function  int sigpending(sigset_t_ptr set);
    implementation direct;
}

ADD 344 {
    function  int sigreturn(ucontext_t_ptr sigcntxp);
    implementation direct;
}

ADD 345 {
    function  int sigtimedwait(const_sigset_t_ptr set, siginfo_t_ptr info,
			       const_timespec_1_2_0_ptr timeout);
    implementation direct;
}

ADD 346 {
    function  int sigwaitinfo(const_sigset_t_ptr set, siginfo_t_ptr info);
    implementation direct;
}

ADD 347 {
    function  int __acl_get_file(const_char_ptr path, acl_type_t type,
				 acl_1_2_0_ptr aclp);
    implementation direct;
}

ADD 348 {
    function  int __acl_set_file(const_char_ptr path, acl_type_t type,
				 acl_1_2_0_ptr aclp);
    implementation direct;
}

ADD 349 {
    function  int __acl_get_fd(int filedes, acl_type_t type, 
			       acl_1_2_0_ptr aclp);
    implementation direct;
}

ADD 350 {
    function  int __acl_set_fd(int filedes, acl_type_t type, 
			       acl_1_2_0_ptr aclp);
    implementation direct;
}

ADD 351 {
    function  int __acl_delete_file(const_char_ptr path, acl_type_t type);
    implementation direct;
}

ADD 352 {
    function  int __acl_delete_fd(int filedes, acl_type_t type);
    implementation direct;
}

ADD 353 {
    function  int __acl_aclcheck_file(const_char_ptr path, acl_type_t type,
				      acl_1_2_0_ptr aclp);
    implementation direct;
}

ADD 354 {
    function  int __acl_aclcheck_fd(int filedes, acl_type_t type, 
				    acl_1_2_0_ptr aclp);
    implementation direct;
}

ADD 355 {
    function  int extattrctl(const_char_ptr path, int cmd, 
			     const_char_ptr attrname, char_ptr arg);
    implementation direct;
}

ADD 356 {
    function  int extattr_set_file(const_char_ptr path, const_char_ptr attrname,
				   iovec_1_2_0_ptr iovp, unsigned iovcnt);
    implementation direct;
}

ADD 357 {
    function  int extattr_get_file(const_char_ptr path, const_char_ptr attrname,
				   iovec_1_2_0_ptr iovp, unsigned iovcnt);
    implementation direct;
}

ADD 358 {
    function  int extattr_delete_file(const_char_ptr path, const_char_ptr attrname);
    implementation direct;
}

ADD 359 {
    function  int aio_waitcomplete(aiocb_1_2_0_ptr_ptr aiocbp,
				   timespec_1_2_0_ptr timeout);
    implementation direct;
}

ADD 360 {
    function  int getresuid(uid_t_ptr ruid, uid_t_ptr euid, uid_t_ptr suid);
    implementation direct;
}

ADD 361 {
    function  int getresgid(gid_t_ptr rgid, gid_t_ptr egid, gid_t_ptr sgid);
    implementation direct;
}

ADD 362 {
    function  int kqueue(void);
    implementation direct;
}

ADD 363 {
    function  int kevent(int fd, 
			 const_kevent_1_2_0_ptr changelist, int nchanges,
			 kevent_1_2_0_ptr eventlist, int nevents,
			 const_timespec_1_2_0_ptr timeout);

    implementation direct;
}

ADD 393 {
    function  int sendfile(int fd, int s, off_t offset, size_t nbytes, 
			   sf_hdtr_1_2_0_ptr hdtr, off_t_ptr sbytes, int flags);
    implementation direct;
}

ADD 450 {
    function  int varsym_set(int level, const_char_ptr name, const_char_ptr data);
    implementation direct;
}

ADD 451 {
    function  int varsym_get(int mask, const_char_ptr wild, char_ptr buf, int bufsize);
    implementation direct;
}

ADD 452 {
    function  int varsym_list(int level, char_ptr buf, int maxsize, int_ptr marker);
    implementation direct;
}

ADD 453 {
    function  int upc_register(upcall_1_2_0_ptr upc, void_ptr ctxfunc,
			       void_ptr func, void_ptr data);
    implementation direct;
}

ADD 454 {
    function  int upc_control(int cmd, int upcid, void_ptr data);
    implementation direct;
}

ADD 455 {
    function  int caps_sys_service(const_char_ptr name, uid_t uid, gid_t gid, int upcid, int flags);
    implementation direct;
}

ADD 456 {
    function  int caps_sys_client(const_char_ptr name, uid_t uid, gid_t gid, int upcid, int flags);
    implementation direct;
}

ADD 457 {
    function  int caps_sys_close(int portid);
    implementation direct;
}

ADD 458 {
    function  off_t caps_sys_put(int portid, void_ptr msg, int msgsize);
    implementation direct;
}

ADD 459 {
    function  int caps_sys_reply(int portid, void_ptr msg, int msgsize, off_t msgcid);
    implementation direct;
}

ADD 460 {
    function  int caps_sys_get(int portid, void_ptr msg, int maxsize, 
			       caps_msgid_1_2_0_ptr msgid,
			       caps_cred_1_2_0_ptr ccr);
    implementation direct;
}

ADD 461 {
    function  int caps_sys_wait(int portid, void_ptr msg, int maxsize,
				caps_msgid_1_2_0_ptr msgid, 
				caps_cred_1_2_0_ptr ccr);
    implementation direct;
}

ADD 462 {
    function  int caps_sys_abort(int portid, off_t msgcid, int flags);
    implementation direct;
}

ADD 463 {
    function  off_t caps_sys_getgen(int portid);
    implementation direct;
}

ADD 464 {
    function  int caps_sys_setgen(int portid, off_t gen);
    implementation direct;
}

ADD 465 {
    function  int exec_sys_register(void_ptr entry);
    implementation direct;
}

ADD 466 {
    function  int exec_sys_unregister(int id);
    implementation direct;
}

ADD 467 {
    function  int sys_checkpoint(int type, int fd, pid_t pid, int retval);
    implementation direct;
}

ADD 468 {
    function  int mountctl(const_char_ptr path, int op, int fd,
			   const_void_ptr ctl, int ctllen, void_ptr buf,
			   int buflen);
    implementation direct;
}

ADD 469 {
    function  int umtx_sleep(volatile_const_int_ptr ptr, int value,
			     int timeout);
    implementation direct;
}

ADD 470 {
    function  int umtx_wakeup(volatile_const_int_ptr ptr, int count);
    implementation direct;
}

ADD 471 {
    function  int jail_attach(int jid);
    implementation direct;
}

ADD 472 {
    function  int sys_set_tls_area(int which, tls_info_1_2_0_ptr info,
				   size_t infosize);
    implementation direct;
}

ADD 473 {
    function  int sys_get_tls_area(int which, tls_info_1_2_0_ptr info,
				   size_t infosize);
    implementation direct;
}

ADD 474 {
    function  int closefrom(int fd);
    implementation direct;
}

