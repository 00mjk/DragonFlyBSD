$DragonFly: src/UPDATING,v 1.7 2004/04/22 23:24:19 dillon Exp $

Updating Information for DragonFly users.

This file should warn you of any pitfalls which you might need to work around
when trying to update your DragonFly system.

If you discover any problem, please contact the bugs@lists.dragonflybsd.org
mailing list with the details.

------------------------------------------------------------------------------

> Upgrading to DragonFly from FreeBSD
---------------------

You can build the DragonFly world and DragonFly kernels on a FreeBSD-4.x or
FreeBSD-5.x machine and then install DragonFly over FreeBSD, replacing
FreeBSD.  Note that the DragonFly buildworld target does not try to reuse
make depend information, it starts from scratch, so no pre-cleaning of the
object hierarchy is necessary.

	# get the CVS pository (it is placed in /home/dcvs, 500MB).
	# Please use the -h option and a mirror site to pull the 
	# initial repository, but feel free to use the main repository
	# machine to pull updates.
	cvsup /usr/share/examples/cvsup/DragonFly-supfile
	# install the source from the CVS hierarchy (remove preexisting
	# FreeBSD src first) (500MB)
	cd /usr
	rm -rf src
	cvs -R -d /home/dcvs checkout src
	cvs -R -d /home/dcvs checkout dfports

	# build it (500MB used in /usr/obj)
	#
	cd /usr/src
	make buildworld
	make buildkernel KERNCONF=<KERNELNAME>

Once you have built DragonFly you have to install it over FreeBSD.  Since
DragonFly does not track changes made by FreeBSD to its include file 
hierarchy and include file pollution can cause all sorts of unexpected
compilation issues to come up, it is best to wipe your include hierarchy
prior to installing DragonFly.  Note that you should not wipe any installed
FreeBSD header files or binaries until after you have successfully completed
the build steps above.

	rm -rf /usr/include
	mkdir /usr/include
	make installkernel KERNCONF=<KERNELNAME>
	make installworld

Then you need to upgrade your /etc.  DragonFly's 'make upgrade' target 
will unconditionally upgrade the /etc files that sysops do not usually
mess around with, such as the files in /etc/rc.d.  If you are unsure we 
recommend that you make a backup of your /etc before applying this step.
Note that DragonFly's RC system is basically RCNG from FreeBSD-5, but
there are some differences in the contents of the RC files.

	make upgrade

Finally we recommend that you do an 'ls -lta BLAH' for /bin, /sbin, /usr/bin,
/usr/bin, and /usr/lib, and remove any stale files that you find.

------------------------------------------------------------------------------

> Upgrading DragonFly on an existing DragonFly system.
---------------------

The best way to upgrade DragonFly is to maintain a copy of the DragonFly
CVS repository via cvsup and to checkout the source base and DragonFly
ports via this repository.   The repository is stored in /home/dcvs by
default and requires about 500MB of disk space.  The checked out source
tree (/usr/src) requires about 500MB of disk space, and the build will
eat around 500MB of space out of /usr/obj.  To maintain the build you 
should reserve at least 2GB of disk space, and 3GB if you have the space.

Note: most people run cvsup via a root cron job to keep the repository up to
date.  Please limit such automatic updates to once a day and try to randomize
the hour and minute in the cron job a bit to avoid pileups.

	# get the CVS pository (it is placed in /home/dcvs)
	cvsup /usr/share/examples/cvsup/DragonFly-supfile
	# install the source from the CVS hierarchy
	cd /usr
	cvs -R -d /home/dcvs checkout src
	cvs -R -d /home/dcvs checkout dfports

Once you have the repository and broken out sources you can decide whether to
update your sources from the repository automatically or manually.  Since
you are tracking changes made to DragonFly, it is usually a good idea to
update the sources manually:

	cd /usr/src
	cvs update

To upgrade a DragonFly system from sources you run the following sequence:

	cd /usr/src
	make buildworld
	make buildkernel KERNCONF=<KERNELNAME>
	make installkernel KERNCONF=<KERNELNAME>
	make installworld

You will also want to run the 'upgrade' target to upgrade your /etc.  The
upgrade target is aware of stale files created by older DragonFly 
installations and should delete them automatically.

	make upgrade

If you are using 'config' manually from /usr/src/sys/i386/conf/BLAH, note 
that the build will use the current DragonFly environment rather then
the post-build environment from the last buildworld.   For this reason manual
configs are discouraged.  The proper way to build a kernel is to use the
'buildkernel' or 'quickkernel' target in /usr/src.

Once you've done a full build of the world and kernel you can do incremental
upgrades of either by using the 'quickworld' and 'quickkernel' targets
instead of 'buildworld' and 'buildkernel'.  If you have any problems with
the quick targets, try doing a cvsup, cvs update, and then a full buildworld
and buildkernel as shown above, before asking for help.

> Kerberos IV
-------------

Kerberos IV (eBones) was removed from the tree, please consider moving to
Kerberos 5 (Heimdal).

> FreeBSD and DragonFly ports
-----------------------------

DragonFly will eventually have its own package management system but at the
moment we leverage off of the FreeBSD ports system.  You should maintain
/usr/ports from the FreeBSD cvs repository via cvsup just like you do now.

DragonFly has its own 'port overrides' hierarchy in /usr/dfports.  You can
check this out of the DragonFly cvs repository using:

cd /usr
cvs -R -d /cvs checkout dfports

You may wish to use a consolidated distfiles directory, in which case you
should make /usr/dfports/distfiles a softlink to your existing distfiles
directory (typically /usr/ports/distfiles).

Be sure that you have installed 'relpath' from the DragonFly sources
(/usr/src/usr.bin/relpath) as well as the updated /usr/share/mk files from
/usr/src/share/mk.  As a test you can cd into /usr/ports/sysutils/cpdup and
build the port.  Dragonfly should contain an override and you should see a
warning message that the DragonFly override is being build instead when you
build it from the FreeBSD ports.

