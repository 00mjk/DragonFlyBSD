$DragonFly: src/gnu/lib/gcc41/libstdc++/ctype_base.h.patch,v 1.1 2006/09/27 12:10:33 corecode Exp $
--- /usr/src/contrib/gcc-4.0/libstdc++-v3/config/os/bsd/netbsd/ctype_base.h	2005-06-05 20:22:15.000000000 +0200
+++ ctype_base.h	2005-09-17 17:30:55.000000000 +0200
@@ -43,16 +43,16 @@
 
     // NB: Offsets into ctype<char>::_M_table force a particular size
     // on the mask type. Because of this, we don't use an enum.
-    typedef unsigned char      	mask;
-    static const mask upper    	= _U;
-    static const mask lower 	= _L;
-    static const mask alpha 	= _U | _L;
-    static const mask digit 	= _N;
-    static const mask xdigit 	= _N | _X;
-    static const mask space 	= _S;
-    static const mask print 	= _P | _U | _L | _N | _B;
-    static const mask graph 	= _P | _U | _L | _N;
-    static const mask cntrl 	= _C;
-    static const mask punct 	= _P;
-    static const mask alnum 	= _U | _L | _N;
+    typedef uint16_t      	mask;
+    static const mask upper    	= _CTYPEMASK_U;
+    static const mask lower 	= _CTYPEMASK_L;
+    static const mask alpha 	= _CTYPEMASK_A;
+    static const mask digit 	= _CTYPEMASK_D;
+    static const mask xdigit 	= _CTYPEMASK_X;
+    static const mask space 	= _CTYPEMASK_S;
+    static const mask print 	= _CTYPEMASK_R;
+    static const mask graph 	= _CTYPEMASK_G;
+    static const mask cntrl 	= _CTYPEMASK_C;
+    static const mask punct 	= _CTYPEMASK_P;
+    static const mask alnum 	= _CTYPEMASK_A | _CTYPEMASK_D;
   };
