# $DragonFly: src/gnu/usr.bin/cc41/Makefile.langs,v 1.1 2006/09/27 12:10:33 corecode Exp $

.if !defined(NO_CXX)
gencheck_defs=	cp/cp-tree.def
.endif
#.if !defined(NO_OBJC)
#gencheck_defs+=	objc/objc-tree.def
#.endif

optionsfiles=	${GCCDIR}/gcc/c.opt
optionsfiles+=	${GCCDIR}/gcc/common.opt
optionsfiles+=	${GCCDIR}/gcc/config/${GCC_CPU}/${GCC_CPU}.opt
#.if !defined(NO_FORTRAN)
#optionsfiles+=	${GCCDIR}/gcc/f/lang.opt
#.endif

.if !defined(NO_CXX)
LANG_SPECS_FILES=	cp/lang-specs.h
.endif
#.if !defined(NO_FORTRAN)
#LANG_SPECS_FILES+=	f/lang-specs.h
#.endif
#.if !defined(NO_OBJC)
#LANG_SPECS_FILES+=	objc/lang-specs.h
#.endif

specs.h:
	rm -f ${.TARGET}
	touch ${.TARGET}
.for F in ${LANG_SPECS_FILES}
	echo "#include \"${F}\"" >> ${.TARGET}
.endfor

CLEANFILES+=	specs.h c-parse.y

# this is directly from GCC's Makefile, beware evil
GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \
  $(CPP_ID_DATA_H) $(host_xm_file_list) \
  $(tm_file_list) $(HASHTAB_H) $(SPLAY_TREE_H) $(srcdir)/bitmap.h \
  $(srcdir)/coverage.c $(srcdir)/function.h $(srcdir)/rtl.h \
  $(srcdir)/optabs.h $(srcdir)/tree.h $(srcdir)/libfuncs.h $(SYMTAB_H) \
  $(srcdir)/real.h $(srcdir)/varray.h $(srcdir)/insn-addr.h $(srcdir)/hwint.h \
  $(srcdir)/ipa-reference.h \
  $(srcdir)/cselib.h $(srcdir)/basic-block.h  $(srcdir)/cgraph.h \
  $(srcdir)/c-common.h $(srcdir)/c-tree.h $(srcdir)/reload.h \
  $(srcdir)/alias.c $(srcdir)/bitmap.c $(srcdir)/cselib.c $(srcdir)/cgraph.c \
  $(srcdir)/ipa-prop.c $(srcdir)/ipa-cp.c\
  $(srcdir)/dbxout.c $(srcdir)/dwarf2out.c $(srcdir)/dwarf2asm.c \
  $(srcdir)/dojump.c $(srcdir)/tree-profile.c \
  $(srcdir)/emit-rtl.c $(srcdir)/except.c $(srcdir)/explow.c $(srcdir)/expr.c \
  $(srcdir)/function.c $(srcdir)/except.h \
  $(srcdir)/gcse.c $(srcdir)/integrate.c $(srcdir)/lists.c $(srcdir)/optabs.c \
  $(srcdir)/profile.c $(srcdir)/regclass.c \
  $(srcdir)/reg-stack.c $(srcdir)/cfglayout.c \
  $(srcdir)/sdbout.c $(srcdir)/stor-layout.c \
  $(srcdir)/stringpool.c $(srcdir)/tree.c $(srcdir)/varasm.c \
  $(srcdir)/tree-mudflap.c $(srcdir)/tree-flow.h \
  $(srcdir)/c-objc-common.c $(srcdir)/c-common.c $(srcdir)/c-parser.c \
  $(srcdir)/tree-ssanames.c $(srcdir)/tree-eh.c $(srcdir)/tree-ssa-address.c \
  $(srcdir)/tree-phinodes.c $(srcdir)/tree-cfg.c \
  $(srcdir)/tree-dfa.c $(srcdir)/tree-ssa-propagate.c \
  $(srcdir)/tree-iterator.c $(srcdir)/gimplify.c \
  $(srcdir)/tree-chrec.h $(srcdir)/tree-vect-generic.c \
  $(srcdir)/tree-ssa-operands.h $(srcdir)/tree-ssa-operands.c \
  $(srcdir)/tree-profile.c $(srcdir)/tree-nested.c \
  $(srcdir)/ipa-reference.c $(srcdir)/tree-ssa-structalias.h \
  $(srcdir)/tree-ssa-structalias.c \
  $(srcdir)/targhooks.c $(out_file)


.if !defined(NO_CXX)
GTFILES_CPP= \
   $(srcdir)/cp/rtti.c $(srcdir)/cp/mangle.c $(srcdir)/cp/name-lookup.h \
   $(srcdir)/cp/name-lookup.c $(srcdir)/cp/cp-tree.h $(srcdir)/cp/decl.h \
   $(srcdir)/cp/call.c $(srcdir)/cp/decl.c $(srcdir)/cp/decl2.c \
   $(srcdir)/cp/pt.c $(srcdir)/cp/repo.c $(srcdir)/cp/semantics.c \
   $(srcdir)/cp/tree.c $(srcdir)/cp/parser.c $(srcdir)/cp/method.c \
   $(srcdir)/cp/typeck2.c $(srcdir)/c-common.c $(srcdir)/c-common.h \
   $(srcdir)/c-lex.c $(srcdir)/c-pragma.c $(srcdir)/cp/class.c \
   $(srcdir)/cp/cp-objcp-common.c
GTFILES_FILES_LANGS+=	${GTFILES_CPP:C/.*/cp/g}
GTFILES_FILES_FILES+=	${GTFILES_CPP}
GTFILES_LANG_DIR_NAMES+= cp
.endif

#.if !defined(NO_FORTRAN)
#GTFILES+=	$(srcdir)/f/com.c $(srcdir)/f/com.h $(srcdir)/f/ste.c $(srcdir)/f/where.h \
#   $(srcdir)/f/where.c $(srcdir)/f/lex.c
#.endif

#.if !defined(NO_OBJC)
#GTFILES+=	$(srcdir)/objc/objc-act.c $(srcdir)/objc/objc-act.h
#.endif

# C
GTFILES_C+= \
	$(srcdir)/c-lang.c $(srcdir)/c-tree.h $(srcdir)/c-decl.c \
	$(srcdir)/c-common.c $(srcdir)/c-common.h \
	$(srcdir)/c-pragma.c $(srcdir)/c-objc-common.c $(srcdir)/c-parser.c
GTFILES_FILES_LANGS+=	${GTFILES_C:C/.*/c/g}
GTFILES_FILES_FILES+=	${GTFILES_C}


# collect
GTFILES+=	${GTFILES_FILES_FILES}
