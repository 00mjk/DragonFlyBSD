$DragonFly: src/gnu/usr.bin/cc3/cc_int/patches/Attic/reload1.c.patch,v 1.1 2004/03/05 21:38:44 joerg Exp $
Index: reload1.c
===================================================================
RCS file: /cvs/src/contrib/gcc-3.3/gcc/reload1.c,v
retrieving revision 1.1
diff -u -r1.1 reload1.c
--- reload1.c	2 Feb 2004 23:09:49 -0000	1.1
+++ reload1.c	4 Mar 2004 15:18:46 -0000
@@ -42,6 +42,7 @@
 #include "toplev.h"
 #include "except.h"
 #include "tree.h"
+#include "protector.h"
 
 /* This file contains the reload pass of the compiler, which is
    run after register allocation has been done.  It checks that
@@ -2000,7 +2001,7 @@
       if (from_reg == -1)
 	{
 	  /* No known place to spill from => no slot to reuse.  */
-	  x = assign_stack_local (GET_MODE (regno_reg_rtx[i]), total_size,
+	  x = assign_stack_local_for_pseudo_reg (GET_MODE (regno_reg_rtx[i]), total_size,
 				  inherent_size == total_size ? 0 : -1);
 	  if (BYTES_BIG_ENDIAN)
 	    /* Cancel the  big-endian correction done in assign_stack_local.
