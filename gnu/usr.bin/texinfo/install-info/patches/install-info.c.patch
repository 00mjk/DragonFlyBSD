$DragonFly: src/gnu/usr.bin/texinfo/install-info/patches/install-info.c.patch,v 1.1 2005/08/28 12:25:05 asmodai Exp $

--- install-info.c	2005-08-28 12:43:06.000000000 +0200
+++ install-info.c	2005-05-23 12:50:48.000000000 +0200
@@ -1,3 +1,4 @@
+/* $FreeBSD: src/contrib/texinfo/util/install-info.c,v 1.16 2005/05/23 10:50:48 ru Exp $ */
 /* install-info -- create Info directory entry(ies) for an Info file.
    $Id: install-info.c,v 1.12 2004/04/11 17:56:47 karl Exp $
 
@@ -22,6 +23,7 @@
 #include <getopt.h>
 
 static char *progname = "install-info";
+static char *default_section = NULL;
 
 struct spec_entry;
 struct spec_section;
@@ -120,6 +122,8 @@
 struct option longopts[] =
 {
   { "delete",    no_argument, NULL, 'r' },
+  { "defentry",  required_argument, NULL, 'E' },
+  { "defsection", required_argument, NULL, 'S' },
   { "dir-file",  required_argument, NULL, 'd' },
   { "entry",     required_argument, NULL, 'e' },
   { "help",      no_argument, NULL, 'h' },
@@ -439,6 +443,10 @@
 Options:\n\
  --delete          delete existing entries for INFO-FILE from DIR-FILE;\n\
                      don't insert any new entries.\n\
+ --defentry=TEXT   like --entry, but only use TEXT if an entry\n\
+                     is not present in INFO-FILE.\n\
+ --defsection=TEXT like --section, but only use TEXT if a section\n\
+                     is not present in INFO-FILE.\n\
  --dir-file=NAME   specify file name of Info directory file.\n\
                      This is equivalent to using the DIR-FILE argument.\n\
  --entry=TEXT      insert TEXT as an Info directory entry.\n\
@@ -900,7 +908,8 @@
                      specified.  Default to section "Miscellaneous".  */
                   *sections = (struct spec_section *)
                     xmalloc (sizeof (struct spec_section));
-                  (*sections)->name = "Miscellaneous";
+                  (*sections)->name =
+		    default_section ? default_section : "Miscellaneous";
                   (*sections)->next = 0;
                   (*sections)->missing = 1;
                   head = *sections;
@@ -1142,6 +1151,8 @@
   struct spec_section *input_sections = NULL;
   struct spec_entry *entries_to_add = NULL;
   int n_entries_to_add = 0;
+  struct spec_entry *default_entries_to_add = NULL;
+  int n_default_entries_to_add = 0;
 
   /* Record the old text of the dir file, as plain characters,
      as lines, and as nodes.  */
@@ -1205,6 +1216,7 @@
           dirfile = concat (optarg, "", "/dir");
           break;
 
+	case 'E':
         case 'e':
           {
             struct spec_entry *next
@@ -1219,9 +1231,18 @@
             next->text_len = olen;
             next->entry_sections = NULL;
             next->entry_sections_tail = NULL;
-            next->next = entries_to_add;
-            entries_to_add = next;
-            n_entries_to_add++;
+	    if (opt == 'e')
+	      {
+		next->next = entries_to_add;
+		entries_to_add = next;
+		n_entries_to_add++;
+	      }
+	    else
+	      {
+		next->next = default_entries_to_add;
+		default_entries_to_add = next;
+		n_default_entries_to_add++;
+	      }
           }
           break;
 
@@ -1259,6 +1280,10 @@
           }
           break;
 
+	case 'S':
+	  default_section = optarg;
+	  break;
+
         case 'V':
           printf ("install-info (GNU %s) %s\n", PACKAGE, VERSION);
           puts ("");
@@ -1301,6 +1326,11 @@
                    &input_sections, &entries_to_add);
   if (i > n_entries_to_add)
     n_entries_to_add = i;
+  else if (n_entries_to_add == 0)
+    {
+      entries_to_add = default_entries_to_add;
+      n_entries_to_add = n_default_entries_to_add;
+    }
 
   if (!delete_flag)
     {
@@ -1332,7 +1362,8 @@
             {
               input_sections = (struct spec_section *)
                 xmalloc (sizeof (struct spec_section));
-              input_sections->name = "Miscellaneous";
+              input_sections->name =
+		default_section ? default_section : "Miscellaneous";
               input_sections->next = NULL;
               input_sections->missing = 1;
             }
@@ -1423,9 +1454,14 @@
                                                 dir_lines[i].start,
                                                 dir_lines[i].size)
                             && !dir_lines[i].delete)
-                          fatal (_("menu item `%s' already exists, for file `%s'"),
+			  {
+			    if (quiet_flag)
+			      dir_lines[i].delete = 1;
+			    else
+			      fatal (_("menu item `%s' already exists, for file `%s'"),
                                  extract_menu_item_name (entry->text),
                                  extract_menu_file_name (dir_lines[i].start));
+			  }
                         if (dir_lines[i].start[0] == '*'
                             && menu_line_lessp (entry->text, entry->text_len,
                                                 dir_lines[i].start,
